1
00:00:00,060 --> 00:00:05,370


2
00:00:10,350 --> 00:00:11,100
大家好

3
00:00:11,970 --> 00:00:15,390
今天我给大家讲这个太亏，性能

4
00:00:15,570 --> 00:00:17,340
调优相关的一些知识

5
00:00:17,610 --> 00:00:21,690
然后先自我介绍一下，我叫张金鹏，然后是

6
00:00:22,080 --> 00:00:24,060
才可以提供的研发工程师

7
00:00:24,090 --> 00:00:26,220
然后主要负责这个引擎和

8
00:00:26,280 --> 00:00:27,510
性能调优这块

9
00:00:29,970 --> 00:00:30,570
好

10
00:00:30,750 --> 00:00:33,690
呃，大家之前应该已经听过了

11
00:00:33,720 --> 00:00:35,400
这个泰迪的

12
00:00:35,610 --> 00:00:37,200
青龙优化那一刻

13
00:00:37,380 --> 00:00:41,610
然后这一刻呢，主要是把视角放在太亏这层

14
00:00:41,910 --> 00:00:44,400
然后从钛盔内部的一些原理

15
00:00:44,490 --> 00:00:45,750
来讲解

16
00:00:45,810 --> 00:00:49,110
在泰迪地进行中，我们怎么样去调优？

17
00:00:50,670 --> 00:00:53,160
啊，今天的课程呢？主要分为四部分

18
00:00:53,640 --> 00:00:58,080
首先的话，我们会从宏观的角度来看，泰国是一个怎么样的架构？

19
00:00:58,290 --> 00:01:01,170
对你了解了这个价格之后，我是对于你

20
00:01:01,200 --> 00:01:03,660
调整整个系统是有一些帮助的

21
00:01:04,560 --> 00:01:08,580
然后第二部分就是说数据在泰国这层是如何存储的？

22
00:01:08,790 --> 00:01:11,070
所以你如果不了解这个数据

23
00:01:11,075 --> 00:01:15,300
在太空中的分布的话，实际上对你的条约也会造成一些困难

24
00:01:16,110 --> 00:01:20,670
那接下来的话，就是从写和读两个方面去

25
00:01:20,910 --> 00:01:24,300
分别的进行这个调优的一些讲解

26
00:01:26,430 --> 00:01:28,710
好，那我们先进入第一部分

27
00:01:30,180 --> 00:01:33,660
啊，主要包括这个泰国的一个整体价格以及

28
00:01:33,840 --> 00:01:37,470
怎么样？看一个请求，在泰国这边的岩石有多长？

29
00:01:39,930 --> 00:01:42,420
呃，这张图大家应该已经非常

30
00:01:42,900 --> 00:01:43,770
熟悉了

31
00:01:43,775 --> 00:01:46,800
之前的课程应该也讲过，就是对于一个

32
00:01:47,730 --> 00:01:49,200
泰迪b集群的话

33
00:01:50,070 --> 00:01:51,840
主要包括霹雳

34
00:01:52,050 --> 00:01:53,880
泰迪币和泰科威

35
00:01:53,910 --> 00:01:54,930
三个组件

36
00:01:55,440 --> 00:01:59,730
PPT这块呢是负责整个集群的元数据存储以及

37
00:01:59,790 --> 00:02:03,330
整个系统的这个负载调度相关的一些工作

38
00:02:03,335 --> 00:02:05,070
是整个集群的一个大脑

39
00:02:06,120 --> 00:02:08,280
那泰迪比在上呢，主要是跟

40
00:02:08,490 --> 00:02:10,080
客户专去对接的

41
00:02:11,790 --> 00:02:14,880
主要处理的是这个客户端发送来的请求

42
00:02:16,230 --> 00:02:21,540
那开v这层呢，是整个集群中真正存储用户数据的

43
00:02:21,870 --> 00:02:23,400
一个存储层

44
00:02:24,570 --> 00:02:27,390
然后它包括它提供了两种接口

45
00:02:27,480 --> 00:02:29,280
这种是kv的一个A片

46
00:02:30,870 --> 00:02:34,440
这个很好理解，因为它本身是kv嘛，对吧？

47
00:02:35,700 --> 00:02:38,940
哪另一个呢就是这个第四个蛇口的一个A片

48
00:02:38,945 --> 00:02:40,260
那是什么意思呢？

49
00:02:41,130 --> 00:02:43,230
因为有的查询

50
00:02:44,340 --> 00:02:48,450
他比如说这个复杂的计算，比如说我要萨摩或者LA 9

51
00:02:48,570 --> 00:02:50,820
那你的表如果比较大的话

52
00:02:50,850 --> 00:02:54,000
如果你仅仅提供一种kv的AP的话

53
00:02:54,150 --> 00:02:59,370
那你首先你需要把这些kv整个表涉及的所有数据通过kv的接口

54
00:02:59,760 --> 00:03:01,320
去唠叨，泰迪b里面

55
00:03:01,890 --> 00:03:03,390
然后再去

56
00:03:03,600 --> 00:03:04,950
进行计算

57
00:03:05,400 --> 00:03:06,990
大家可以想象一下

58
00:03:07,080 --> 00:03:08,730
这个过程，首先你

59
00:03:09,120 --> 00:03:10,560
捞所有的数据

60
00:03:11,400 --> 00:03:13,140
这个动作是很重型的

61
00:03:13,740 --> 00:03:15,690
你会触发大量的这个

62
00:03:15,780 --> 00:03:16,920
网络的l

63
00:03:18,390 --> 00:03:23,700
第第二部分的话，如果你把数据都捞到一个泰迪币，然后去计算的话，实际上

64
00:03:23,705 --> 00:03:28,170
那你的这个计算资源是没有办法去进行分布式的

65
00:03:29,010 --> 00:03:29,970
所以

66
00:03:30,390 --> 00:03:32,070
他会提供了一种

67
00:03:32,790 --> 00:03:34,320
第一次蛇口的一片

68
00:03:35,010 --> 00:03:37,530
他能够去处理一些简单的

69
00:03:38,220 --> 00:03:41,400
一些逻辑，比如说对某一段数据

70
00:03:41,760 --> 00:03:43,050
进行萨摩

71
00:03:43,530 --> 00:03:46,080
或者对某一段数据进行AI不去

72
00:03:46,860 --> 00:03:48,570
那每个菜kv

73
00:03:49,680 --> 00:03:54,210
负责计算自己内部分数数据，然后把结果

74
00:03:54,480 --> 00:03:55,350
To给

75
00:03:55,355 --> 00:03:56,130
泰迪b

76
00:03:56,280 --> 00:03:58,650
那泰迪被那边的工作就非常轻松了

77
00:03:59,160 --> 00:04:00,240
他直接

78
00:04:00,245 --> 00:04:03,930
对大家的一个结果进行一个聚合就OK了

79
00:04:04,530 --> 00:04:06,900
我们可以可以对比一下这两种方案的

80
00:04:07,080 --> 00:04:07,890
这个

81
00:04:08,550 --> 00:04:09,330
区别

82
00:04:09,540 --> 00:04:13,170
那第二种方案有这个第四个窗口，AP之后

83
00:04:13,920 --> 00:04:17,790
首先你在网络上传输的这个数据量是

84
00:04:17,795 --> 00:04:19,590
可能晓得我只需要

85
00:04:19,770 --> 00:04:21,990
这个中间的一个结果，对吧？

86
00:04:23,010 --> 00:04:24,300
那第二就是

87
00:04:24,360 --> 00:04:29,100
我的真正的计算，首先已经通过kv去进行了一层

88
00:04:29,160 --> 00:04:30,360
预先的计算

89
00:04:30,510 --> 00:04:32,790
计算我这部分数据的

90
00:04:32,795 --> 00:04:34,590
比如说萨摩或者LA去

91
00:04:35,670 --> 00:04:36,810
那再去

92
00:04:37,050 --> 00:04:41,310
聚合到啊，太jb这一层那他就必须要做的活就非常少了

93
00:04:41,370 --> 00:04:43,140
那这样也实现了这个

94
00:04:43,230 --> 00:04:44,820
计算的一个分布式

95
00:04:48,240 --> 00:04:48,840
好

96
00:04:49,860 --> 00:04:51,540
那文进入第二张图

97
00:04:53,730 --> 00:04:55,980
呃，这张图是表示

98
00:04:56,940 --> 00:05:00,390
态科威内部数据的一个划分情况

99
00:05:01,560 --> 00:05:02,940
比如说这个例子中

100
00:05:02,945 --> 00:05:06,330
还有四台的titan v titan 1234

101
00:05:08,340 --> 00:05:13,650
然后我们可以看到每个太空上实际上是管理了

102
00:05:14,040 --> 00:05:15,720
一些数据，比如说

103
00:05:15,780 --> 00:05:17,730
第一个是我的管理了一

104
00:05:17,760 --> 00:05:20,640
北郡依云郡三瑞骏五和锐俊四

105
00:05:20,970 --> 00:05:24,180
那这个ri俊之前，大家应该已经非常清楚了

106
00:05:24,300 --> 00:05:25,800
它就是代表的是

107
00:05:25,860 --> 00:05:28,500
一段数据，一段连续的数据

108
00:05:31,710 --> 00:05:35,820
那我们太亏为里边是通过软@

109
00:05:36,630 --> 00:05:39,660
去保证多副本之间的一致性

110
00:05:40,140 --> 00:05:43,560
那在这个途中呢？我们可以看一下这个瑞金市

111
00:05:43,710 --> 00:05:45,360
它中间有条绿线

112
00:05:46,530 --> 00:05:48,330
把这三个副本串起来

113
00:05:51,570 --> 00:05:54,810
那这个就是代表了一个通过软件特进行复制

114
00:05:55,890 --> 00:05:58,890
他瑞金市，他有三个副本，分别为在

115
00:05:59,100 --> 00:05:59,730
一

116
00:05:59,760 --> 00:06:02,580
3212和4上面

117
00:06:03,330 --> 00:06:04,260
然后

118
00:06:04,470 --> 00:06:09,600
中间标黑的这个表示是瑞士的一个丽的奥斯特里面的一个例子

119
00:06:11,880 --> 00:06:14,580
那在我们这个现在的系统中

120
00:06:15,150 --> 00:06:17,340
我们的读和写都是走离的的

121
00:06:22,050 --> 00:06:22,650
我想听

122
00:06:22,800 --> 00:06:25,290
这个大家应该已经没有什么问题了

123
00:06:25,980 --> 00:06:27,900
那我们在进入到一个

124
00:06:28,230 --> 00:06:33,540
呃，大家在平常并未或者是使使用的利弊太亏

125
00:06:33,545 --> 00:06:34,770
这个时候会

126
00:06:35,070 --> 00:06:37,260
可能会看到的一个卖淫的

127
00:06:37,950 --> 00:06:39,600
在我们太亏里边

128
00:06:39,720 --> 00:06:42,570
普拉斯呢？上有一个叫做ABC的一个

129
00:06:43,680 --> 00:06:44,460
监控

130
00:06:46,080 --> 00:06:51,390
那下面呢？包括加VC的一个省统计的加BC消息的个数

131
00:06:51,840 --> 00:06:55,140
以及嘉宾的消息，他处理的一个

132
00:06:55,470 --> 00:06:56,340
延迟

133
00:06:56,345 --> 00:06:58,500
这个延迟代表的是什么呢？

134
00:06:58,680 --> 00:06:59,880
实际上就是

135
00:06:59,910 --> 00:07:02,310
这个请求到达一个太亏

136
00:07:03,210 --> 00:07:05,340
和这个请求被处理完

137
00:07:05,490 --> 00:07:06,390
然后

138
00:07:06,395 --> 00:07:09,150
从太空发送出来，这一段时间

139
00:07:09,180 --> 00:07:10,020
比如说

140
00:07:10,410 --> 00:07:12,420
这个上面记得岩石

141
00:07:12,690 --> 00:07:13,590
是

142
00:07:13,740 --> 00:07:16,620
一个请求在太空上停留的一个岩石

143
00:07:17,070 --> 00:07:18,840
所以有了这个东西之后

144
00:07:19,800 --> 00:07:20,910
你可以

145
00:07:21,120 --> 00:07:26,430
真正的知道这个卖，或者说你你如果系统中出现比较慢的查询呢？

146
00:07:26,640 --> 00:07:27,480
你可以

147
00:07:27,750 --> 00:07:30,360
一眼就看出来这个到底是

148
00:07:30,720 --> 00:07:32,850
慢在太空最长

149
00:07:33,270 --> 00:07:38,580
还是说由于太太亏，这些是非常快的，但是由于这个网络

150
00:07:38,585 --> 00:07:41,130
或者其他的原因导致上层的

151
00:07:41,135 --> 00:07:44,190
态度必须，而且那一段显示的窗口

152
00:07:44,370 --> 00:07:45,540
岩石比较高

153
00:07:46,290 --> 00:07:49,530
另一个这个加PC mag的count就表示了

154
00:07:50,310 --> 00:07:52,200
发来了多少个？

155
00:07:52,500 --> 00:07:53,670
K微请求

156
00:07:54,000 --> 00:07:54,870
比如说啊！

157
00:07:54,960 --> 00:07:57,480
啊，我们可能比较多的就是

158
00:07:57,630 --> 00:07:59,070
可是外套卡MID

159
00:08:00,510 --> 00:08:03,240
这种请求以及靠谱塞塞这种请求

160
00:08:07,950 --> 00:08:08,550
我想听

161
00:08:09,570 --> 00:08:10,230
好

162
00:08:10,410 --> 00:08:13,680
刚刚说到这个CC CC 499日讯

163
00:08:13,860 --> 00:08:16,410
然后这边有一个小的这个tp

164
00:08:17,340 --> 00:08:19,860
啊，如果说泰迪b那边显示

165
00:08:20,250 --> 00:08:22,500
说太科维这边延迟非常高

166
00:08:23,280 --> 00:08:26,550
但是呢，你通过这个太空的加加这个

167
00:08:26,940 --> 00:08:28,290
买水就丢人心

168
00:08:28,620 --> 00:08:30,510
发现了这个颜值并不高

169
00:08:30,515 --> 00:08:31,980
那很有可能这个

170
00:08:32,010 --> 00:08:35,490
岩石就卡在了这个泰迪币和钛亏损为中间

171
00:08:36,240 --> 00:08:38,790
那这个时候你就需要去检查一下这个

172
00:08:39,240 --> 00:08:44,550
网络是不是有什么问题？看一下这个网卡流量是不是被其他程序或者是被？

173
00:08:44,760 --> 00:08:45,510
啊？

174
00:08:45,930 --> 00:08:48,270
它可以本身已经站满了

175
00:08:49,020 --> 00:08:54,330
然后就是说泰迪b和太空之间网络，他是本地的网络还是？

176
00:08:54,335 --> 00:08:57,180
说是嗯跨IDC的这种

177
00:08:58,140 --> 00:09:01,380
网络那拼一下，看这个颜值到底有多高？

178
00:09:06,090 --> 00:09:06,690
我想听

179
00:09:07,710 --> 00:09:10,170
那我们现在进入第二部分

180
00:09:10,380 --> 00:09:13,590
就是数据在泰国这边是如何存储的？

181
00:09:14,520 --> 00:09:16,500
那主要分为三三部分

182
00:09:16,650 --> 00:09:17,670
一个是

183
00:09:17,970 --> 00:09:19,230
菜b那边

184
00:09:19,680 --> 00:09:22,710
一个推广的数据是如何映射成kv的？

185
00:09:24,870 --> 00:09:26,520
第二部分的内容呢？

186
00:09:26,610 --> 00:09:30,060
呃，由于我们支持这个分布式事物

187
00:09:30,660 --> 00:09:35,760
所以呢，并不是一个kv对应到我们泰科威这边存储就是一个kv

188
00:09:35,765 --> 00:09:37,770
他可能还有涉及到一些

189
00:09:38,130 --> 00:09:40,980
啊，两阶段提交中间的一些中间状态

190
00:09:41,460 --> 00:09:43,380
所以我们需要了解一下

191
00:09:43,590 --> 00:09:47,310
啊拉斯比比里面扣了三枚，到底是一个什么样的东西？

192
00:09:48,330 --> 00:09:51,900
然后了解了这个东西之后，第三部分我们再去讲这个

193
00:09:52,470 --> 00:09:53,550
物理kv

194
00:09:54,660 --> 00:09:59,970
在乱世弟弟里面是怎么存储的？这个对于我们后续调优啊，太亏

195
00:09:59,975 --> 00:10:00,870
写入

196
00:10:01,020 --> 00:10:02,490
是非常

197
00:10:02,550 --> 00:10:03,480
有帮助的

198
00:10:05,550 --> 00:10:06,510
好

199
00:10:07,380 --> 00:10:12,630
第第一部分太利利的数据是怎么样映射成kv的呢？

200
00:10:13,740 --> 00:10:15,420
对于一个表来说

201
00:10:15,930 --> 00:10:17,100
他的数据

202
00:10:17,190 --> 00:10:18,420
无非就是两种

203
00:10:18,540 --> 00:10:20,490
一种就是行数据

204
00:10:22,320 --> 00:10:26,550
就是我这一行到底有哪些力挽美一列是什么样的内容？

205
00:10:28,140 --> 00:10:29,220
就是行数据

206
00:10:29,340 --> 00:10:31,530
第二部分就是索引数据

207
00:10:32,010 --> 00:10:34,260
比如说你添加了几个索引，对吧？

208
00:10:35,850 --> 00:10:38,700
这些索引又指向哪些哪些行？

209
00:10:38,790 --> 00:10:41,550
你通过这些索引能够找到具体的这个行

210
00:10:42,750 --> 00:10:44,970
那主要就是分为这两部分数据

211
00:10:46,350 --> 00:10:48,180
那么，在他的必中

212
00:10:48,185 --> 00:10:50,850
一个行数据，他是这么组织起来的

213
00:10:51,150 --> 00:10:53,160
通过一个叫ST

214
00:10:53,430 --> 00:10:55,440
我们叫做行业吧！

215
00:10:55,890 --> 00:10:57,450
然后指向了

216
00:10:57,990 --> 00:10:58,980
每一列

217
00:11:00,090 --> 00:11:00,930
的内容

218
00:11:01,140 --> 00:11:03,480
通过一种编码方式把他们

219
00:11:03,485 --> 00:11:04,230
放起来

220
00:11:07,800 --> 00:11:11,940
好具体这个CP是怎么编码的？我们接下来会讲一下

221
00:11:12,690 --> 00:11:15,600
然后第二部分就是索引索引数据

222
00:11:17,220 --> 00:11:20,040
所索引数据，它指向的是什么呢？

223
00:11:20,100 --> 00:11:21,750
实际上就是一个行号

224
00:11:22,140 --> 00:11:24,000
就是一个164的一个行号

225
00:11:24,420 --> 00:11:29,640
它只需要通过这个索引，去找到具体我这个索引指向的一行

226
00:11:29,760 --> 00:11:30,600
就可以了

227
00:11:33,840 --> 00:11:35,790
好，我们再说一下

228
00:11:36,090 --> 00:11:37,560
OP和

229
00:11:37,680 --> 00:11:40,770
并单词可以在泰迪杯里面是怎么编码的？

230
00:11:43,170 --> 00:11:45,240
首先，在

231
00:11:45,270 --> 00:11:46,410
啊，由于

232
00:11:46,440 --> 00:11:47,370
泰迪比

233
00:11:47,730 --> 00:11:51,780
他是把所有的数据都放在太阳穴上，然后太科委这边呢？

234
00:11:51,870 --> 00:11:54,270
是整个全局的

235
00:11:54,870 --> 00:11:57,810
数据没有分没有按表这么切分

236
00:11:57,990 --> 00:12:01,230
他是一个从从最小可以到最大的

237
00:12:01,290 --> 00:12:02,430
这么一个区间

238
00:12:02,910 --> 00:12:06,630
所以他就为这个肉体编码里面必须考虑

239
00:12:06,780 --> 00:12:08,580
不同表的数据需要

240
00:12:09,090 --> 00:12:10,620
需要能够区分

241
00:12:10,800 --> 00:12:13,320
并且相同表的数据最好能够

242
00:12:13,710 --> 00:12:14,400
啊？

243
00:12:14,520 --> 00:12:17,880
能够连能够是连续的，在这个表空间里面

244
00:12:17,940 --> 00:12:23,250
啊在这个t的空间里面，因为这样的话，你对于sky这种操作的话你才能

245
00:12:23,340 --> 00:12:25,890
去呃，比较高效的进行

246
00:12:26,790 --> 00:12:28,050
那怎么做到呢？

247
00:12:28,560 --> 00:12:31,320
在他的店里面，一个肉可以编码他是

248
00:12:31,950 --> 00:12:35,880
第一部分就是前边是一个推广ID

249
00:12:36,120 --> 00:12:39,240
这个是t8 ID，在全局

250
00:12:39,480 --> 00:12:40,590
能保证唯一

251
00:12:41,340 --> 00:12:43,350
他是一个164的一个

252
00:12:43,680 --> 00:12:44,790
啊，数据类型

253
00:12:46,080 --> 00:12:47,130
转八个字典

254
00:12:49,560 --> 00:12:53,790
那接下来之后可以她有一个高二的一个一个标志位

255
00:12:53,940 --> 00:12:57,240
表示这是一个人克的，这是一个nt

256
00:12:58,410 --> 00:13:00,300
那最后一部分就是肉挨低

257
00:13:00,720 --> 00:13:03,660
这个也是一个164的，一个硬的行

258
00:13:04,200 --> 00:13:06,000
那经过这么编码之后

259
00:13:06,150 --> 00:13:07,380
我的一行

260
00:13:07,590 --> 00:13:08,460
数据

261
00:13:08,640 --> 00:13:10,200
就能在全局

262
00:13:10,205 --> 00:13:11,220
保证唯一

263
00:13:13,380 --> 00:13:15,060
好，我们再看一下

264
00:13:15,240 --> 00:13:17,280
索引可以是怎么编码的？

265
00:13:18,420 --> 00:13:20,820
同样，你这个索引属于哪个推广？

266
00:13:20,910 --> 00:13:22,050
也是需要

267
00:13:22,080 --> 00:13:26,100
指出来的，所以它的第一部分也是啊，退步ID

268
00:13:26,640 --> 00:13:28,290
也是八位的推广ID

269
00:13:28,440 --> 00:13:30,060
八八个自己的贴吧一点

270
00:13:30,360 --> 00:13:33,900
那接下来她是一个AI表示我这个屁

271
00:13:33,960 --> 00:13:35,340
是一个淫荡sk

272
00:13:37,470 --> 00:13:38,610
接下来

273
00:13:38,910 --> 00:13:41,010
就是啊，音萨克斯ID

274
00:13:43,170 --> 00:13:45,000
为什么有一个音量SID呢？

275
00:13:45,090 --> 00:13:47,790
你有可能啊，两个音大是他的

276
00:13:48,150 --> 00:13:50,460
内容是一样的，但是他属于不同的列

277
00:13:51,420 --> 00:13:53,220
啊，属于不同的索引

278
00:13:53,340 --> 00:13:54,720
所以你还是需要

279
00:13:54,990 --> 00:13:55,950
区分

280
00:13:57,870 --> 00:14:00,150
好，最后一部分就是你的

281
00:14:00,630 --> 00:14:04,920
这个音大师本身的内容，比如说你在一个内容上面建了一个indie克斯

282
00:14:05,310 --> 00:14:08,220
那内蒙比如说你叫张三李四那张三？

283
00:14:08,250 --> 00:14:10,890
和李四就是这个隐大克斯的一个内容

284
00:14:12,780 --> 00:14:13,980
好，我们看到

285
00:14:14,550 --> 00:14:18,870
我们的音单词可以，实际上可以加一个优尼克的一个限定

286
00:14:19,290 --> 00:14:20,190
表示

287
00:14:20,400 --> 00:14:22,110
我这个阴蛋斯

288
00:14:22,560 --> 00:14:25,320
这个内容这一行的这个烟弹词的这个内容

289
00:14:25,380 --> 00:14:28,920
他在这个表的空间内，是完全唯一的

290
00:14:29,730 --> 00:14:33,510
那有了这个唯一的限制之后，实际上我通过

291
00:14:33,660 --> 00:14:36,930
前面这四个段拼出来的t

292
00:14:37,170 --> 00:14:38,760
一定是全局唯一的

293
00:14:39,870 --> 00:14:41,160
就不可能有重复

294
00:14:41,880 --> 00:14:44,520
所以有你可以list

295
00:14:45,480 --> 00:14:47,250
它的编码就是这个样子

296
00:14:48,150 --> 00:14:53,460
那他在外面呢？就是指向我这个应该是属于哪一行的？

297
00:14:56,820 --> 00:14:58,290
另一种我们还有一种

298
00:14:58,320 --> 00:15:01,320
是没有加油，你可以样限定的，应当sk

299
00:15:02,160 --> 00:15:06,240
他跟额加了优秀可以让4k的唯一区别就是

300
00:15:06,600 --> 00:15:08,100
It的最后

301
00:15:08,220 --> 00:15:09,990
他把热我ID拼上了

302
00:15:10,770 --> 00:15:16,080
因为因为因为家康康特，他有可能不唯一，所以通过前面这部分拼出来

303
00:15:16,085 --> 00:15:16,710
哎

304
00:15:17,460 --> 00:15:18,270
之后

305
00:15:18,330 --> 00:15:19,410
它并不能

306
00:15:19,470 --> 00:15:20,400
代表

307
00:15:21,360 --> 00:15:25,500
你这个q是全球唯一的，所以她需要加上一个肉外滴

308
00:15:26,670 --> 00:15:27,870
来完全的

309
00:15:27,930 --> 00:15:30,450
保证这个t在全局是唯一的

310
00:15:31,140 --> 00:15:31,740
好

311
00:15:32,580 --> 00:15:37,890
那有了上面这几个啊，我们的推广映射成一个

312
00:15:37,895 --> 00:15:38,670
好

313
00:15:38,675 --> 00:15:39,450
Kv

314
00:15:39,510 --> 00:15:40,560
和一个

315
00:15:41,010 --> 00:15:42,360
所以你可以为

316
00:15:42,450 --> 00:15:44,550
那是不是事情就结束了呢？

317
00:15:45,330 --> 00:15:50,130
实际上，这个地方说的这个行kv和intel kv，实际上是一个

318
00:15:50,160 --> 00:15:52,710
在太空内存是一个啊！

319
00:15:53,190 --> 00:15:54,300
逻辑的概念

320
00:15:54,570 --> 00:15:55,830
如果说

321
00:15:56,100 --> 00:16:01,410
拟态可以不支持两阶段的这个提交的话，不支持分布式事物的话，实际上

322
00:16:01,800 --> 00:16:05,850
这个逻辑kv，完全能够对应上你的物理kv

323
00:16:06,570 --> 00:16:09,960
就直接把这个kv这个kv写下去就OK了

324
00:16:11,070 --> 00:16:15,570
但是由于他的病是一个支持分布式事务的一个

325
00:16:15,900 --> 00:16:16,740
数据库

326
00:16:17,130 --> 00:16:22,440
所以，他中间也采用了两阶段的一个事务提交，所以你不

327
00:16:22,445 --> 00:16:24,780
不能直接把一个题直接写上去

328
00:16:25,740 --> 00:16:28,350
它中间可能会有一些中间状态

329
00:16:29,010 --> 00:16:29,880
所以

330
00:16:30,480 --> 00:16:31,950
在这个

331
00:16:32,310 --> 00:16:36,210
在太空这层，我们使用了装饰特别高，那个范围这种

332
00:16:36,450 --> 00:16:37,290
属性

333
00:16:37,410 --> 00:16:38,160
那

334
00:16:38,430 --> 00:16:41,550
我们先回到科内分泌，到底是个什么样的东西？

335
00:16:43,800 --> 00:16:47,340
了了解阿拉斯加结构的人都知道

336
00:16:48,750 --> 00:16:53,370
首先你写你如郭谢他会先去写打不了日志

337
00:16:53,820 --> 00:16:56,010
然后再会把这个

338
00:16:56,220 --> 00:16:58,710
要写的内容写到慢慢推广

339
00:17:00,120 --> 00:17:04,920
好，当你数据量写得越来越多的时候慢慢退步，会长得越来越大，越来越大

340
00:17:05,370 --> 00:17:06,420
你不能

341
00:17:06,510 --> 00:17:09,210
就这么啊，让他一直长下去，对吧？

342
00:17:09,330 --> 00:17:10,230
所以呢？

343
00:17:11,190 --> 00:17:13,500
当他长到一定大小的时候

344
00:17:13,530 --> 00:17:15,030
它会腐烂讯

345
00:17:15,060 --> 00:17:16,110
成为一个

346
00:17:16,170 --> 00:17:17,190
还算是t

347
00:17:17,610 --> 00:17:20,430
然后新的写入呢？又会在一个新的慢慢推广

348
00:17:20,520 --> 00:17:21,660
去进行写入

349
00:17:22,890 --> 00:17:24,720
那随着这个时间的推移

350
00:17:25,170 --> 00:17:27,420
我们大家是t可能就越来越多

351
00:17:28,200 --> 00:17:32,220
那如果说你对这些ss t不进行任何处理的话

352
00:17:32,225 --> 00:17:34,980
身上对于你的读取是有一些

353
00:17:35,370 --> 00:17:36,720
伤害的因为

354
00:17:36,960 --> 00:17:38,550
比如说我给你一个屁

355
00:17:38,790 --> 00:17:41,880
那如果这些ST都对这个可以进行

356
00:17:41,940 --> 00:17:46,770
这个范围有有一个重叠的话，那实际上你都需要去看一下这些文件

357
00:17:47,520 --> 00:17:48,480
所以呢？

358
00:17:48,690 --> 00:17:52,320
它内部I LA i ms里面内部对于对这些

359
00:17:52,590 --> 00:17:56,580
产生的i ct会有一些整理，这个过程叫做砍价群

360
00:17:56,820 --> 00:17:58,590
他回去把它整理成

361
00:17:58,650 --> 00:18:00,150
一个塔形的结构

362
00:18:00,600 --> 00:18:04,290
越到下面的数据是啊，比较老的

363
00:18:04,350 --> 00:18:06,330
接到上面的数据是比较新的

364
00:18:06,510 --> 00:18:08,340
满满腿部里面是最新的

365
00:18:09,540 --> 00:18:10,290
操

366
00:18:11,610 --> 00:18:14,940
QQ里，反正你是什么意思呢？实际上就是说

367
00:18:15,030 --> 00:18:16,680
我有多个这样的

368
00:18:18,450 --> 00:18:21,840
那么，退保加上一个塔形的s，还是t结构

369
00:18:23,160 --> 00:18:26,070
通过这个数据，我们虚线，我们可以看到

370
00:18:26,490 --> 00:18:29,820
在这个例子中，我们有三个这样的口令，三分理

371
00:18:30,330 --> 00:18:32,400
它们位于不同的命名空间

372
00:18:33,180 --> 00:18:35,040
而且在物理上，它们是

373
00:18:35,610 --> 00:18:36,930
完全隔离开的

374
00:18:37,800 --> 00:18:40,230
就这些文件和这些文件是没有任何关系的

375
00:18:40,290 --> 00:18:43,170
这个慢慢推广和这个慢慢推广是没有人关

376
00:18:43,470 --> 00:18:44,460
但是呢？

377
00:18:45,000 --> 00:18:47,400
他们共享了一个w

378
00:18:48,150 --> 00:18:50,340
所以通过这个共享的打不了日志

379
00:18:50,345 --> 00:18:51,540
就能保证

380
00:18:51,720 --> 00:18:56,790
你的写入能够跨多个CF是可以保证圆子的

381
00:18:58,740 --> 00:18:59,370
好

382
00:19:02,280 --> 00:19:06,180
接下来我们看一下我们一个物理的kv

383
00:19:06,300 --> 00:19:09,990
一个逻辑的kv，怎么样映射成太空里面物理的kv？

384
00:19:11,190 --> 00:19:14,280
假设我们的客户里面用了三个课程范围

385
00:19:15,060 --> 00:19:16,320
来存储数据

386
00:19:16,950 --> 00:19:18,360
包括do what

387
00:19:18,390 --> 00:19:20,100
唠嗑和软件

388
00:19:22,320 --> 00:19:26,670
那我们先看第一步，如果一个你要写一个kv进来的话，第一步

389
00:19:27,390 --> 00:19:28,560
需要写

390
00:19:29,100 --> 00:19:30,030
这个t

391
00:19:30,780 --> 00:19:32,250
以及对应的办法

392
00:19:32,430 --> 00:19:34,380
并且呢，这个t要加上版本

393
00:19:35,610 --> 00:19:38,640
这个是w ST s就是你事务的一个起始时间

394
00:19:42,570 --> 00:19:46,950
在洛克这里练呢，我需要把这个key给洛克住，因为我已经处于了这个

395
00:19:47,310 --> 00:19:49,320
提交的第一阶段叫做

396
00:19:49,680 --> 00:19:50,760
处于开始阶段

397
00:19:53,850 --> 00:19:57,570
这样能保证我后面来的这个写请求

398
00:19:57,810 --> 00:19:59,040
是不可能

399
00:19:59,370 --> 00:20:03,390
去获得这个锁，所以就不不能跟他发生冲突

400
00:20:05,370 --> 00:20:07,080
当这一步完成之后呢？

401
00:20:07,530 --> 00:20:11,280
我们就进入二阶段提交的第二阶段，看妹子阶段

402
00:20:12,450 --> 00:20:13,530
这个时候呢？

403
00:20:13,535 --> 00:20:14,280
快去

404
00:20:14,610 --> 00:20:17,040
把我的所删掉，并且

405
00:20:17,910 --> 00:20:20,460
把我的这个提交记录写到这个

406
00:20:20,490 --> 00:20:21,600
乱的CF里面

407
00:20:22,230 --> 00:20:23,640
把这个提交记录

408
00:20:23,910 --> 00:20:25,740
它里面包含什么内容呢？

409
00:20:25,920 --> 00:20:28,050
首先你这个t是有的

410
00:20:28,530 --> 00:20:31,800
并且t的后面加上了这个提交的时间

411
00:20:32,310 --> 00:20:36,750
就是你这个事物的卡密特时间，或者叫你事物的结束时间

412
00:20:37,380 --> 00:20:39,270
它指向了的是什么呢？

413
00:20:39,330 --> 00:20:41,970
是我这个事物对应的这个数据

414
00:20:42,000 --> 00:20:44,100
比如说对应的这个四大的ts

415
00:20:44,250 --> 00:20:47,970
通过这个ts能去找到你这个事物对应的这个数据

416
00:20:50,730 --> 00:20:53,220
并且这边记录了我这个操作

417
00:20:53,225 --> 00:20:56,910
是一个什么样的类型，比如说这个例子中，他是一个铺子

418
00:20:57,990 --> 00:21:01,470
吐的就有点像我们对应于我们啊！

419
00:21:01,650 --> 00:21:03,420
普通数据库里面的颜色

420
00:21:08,130 --> 00:21:09,060
好

421
00:21:10,800 --> 00:21:13,020
那接下来我们看一下

422
00:21:14,160 --> 00:21:19,140
通过之前的一个kv编码，我们知道我们的肉体大概是在

423
00:21:19,320 --> 00:21:20,490
20，多个自己

424
00:21:21,270 --> 00:21:23,940
音奈斯克呢，可能是30

425
00:21:23,970 --> 00:21:25,200
找几百个之间

426
00:21:26,040 --> 00:21:27,690
那如果歪了

427
00:21:28,020 --> 00:21:29,550
我的歪了，特别短

428
00:21:30,870 --> 00:21:35,310
那写多个CF导致的空间和写入开销都会增大，为什么呢？

429
00:21:35,490 --> 00:21:36,240
因为

430
00:21:37,230 --> 00:21:38,670
我的外套特别特别多

431
00:21:38,760 --> 00:21:43,380
但是你呢？却写了两个30多个字节，或者20多个字节的一个屁

432
00:21:43,950 --> 00:21:45,660
实际上，这么加起来的话

433
00:21:45,665 --> 00:21:50,970
我可能内容只有80个字节，但是你的t呢部分却有六六十个字节内史

434
00:21:50,975 --> 00:21:51,690
对这种

435
00:21:52,680 --> 00:21:54,480
那我能不能针对这种？

436
00:21:54,510 --> 00:21:56,400
软的面料进行一些优化呢？

437
00:21:58,890 --> 00:22:01,710
那它可以里面是有一个个这样的优化呢？

438
00:22:02,520 --> 00:22:07,830
相对于之前那张PPT不同的地方就是第一阶段，他是把白流直接携带在这个乱

439
00:22:07,835 --> 00:22:08,430
布克里斯

440
00:22:12,660 --> 00:22:15,780
提交的时候呢，是整把这个歪了

441
00:22:15,870 --> 00:22:17,340
直接携带带

442
00:22:17,640 --> 00:22:19,710
这个艾特这个CF里边

443
00:22:20,580 --> 00:22:22,800
那就没有这个地方的CF

444
00:22:23,370 --> 00:22:25,470
就这边是没有写入任何数据

445
00:22:26,040 --> 00:22:27,900
他这样的好处就是首先

446
00:22:28,230 --> 00:22:30,090
你看提交完一行之后

447
00:22:30,360 --> 00:22:31,710
我实际上

448
00:22:31,920 --> 00:22:33,570
假设这个班里比较短

449
00:22:34,290 --> 00:22:38,160
我实际上占的空间呢？可能是就是这边t，比如说30多个

450
00:22:38,760 --> 00:22:40,740
我这边是WPS 8哥自己

451
00:22:40,800 --> 00:22:42,150
这个破的，一个自己

452
00:22:42,155 --> 00:22:43,740
这个歪了本身

453
00:22:44,250 --> 00:22:47,010
实际上，相对于前一张p不进来说呢？

454
00:22:47,100 --> 00:22:48,270
是节省了

455
00:22:49,140 --> 00:22:51,360
这边k的一个空间

456
00:22:56,070 --> 00:22:57,690
另一个好处就是

457
00:22:57,960 --> 00:23:02,370
当我查到我要查这个题对应的歪了的时候呢？

458
00:23:02,610 --> 00:23:06,540
我只需要扫描这个软件，通过它，我就直接能

459
00:23:06,660 --> 00:23:08,220
从她的外表里面吧！

460
00:23:08,460 --> 00:23:10,650
这个要的内容提取出来

461
00:23:10,830 --> 00:23:13,740
而不需要去通过swot s

462
00:23:13,745 --> 00:23:19,050
再去定位到这边数据位于哪个地方？然后再从那个地方把外套拿

463
00:23:19,055 --> 00:23:20,760
出来就少了一次的

464
00:23:21,210 --> 00:23:22,260
读取操作

465
00:23:26,520 --> 00:23:27,180
好

466
00:23:27,600 --> 00:23:32,910
那讲了这么多，实际上通过前面的英单词编码，我们知道一代是本身实际上

467
00:23:32,915 --> 00:23:36,360
只有八她的弯路只有八个字节就是行号

468
00:23:36,690 --> 00:23:37,950
我这叫肉ID

469
00:23:38,460 --> 00:23:40,440
或者说，它的内容就是空的

470
00:23:40,860 --> 00:23:44,730
那对于这种情况呢？我们肯定是已经优化掉了

471
00:23:44,790 --> 00:23:47,460
他的外貌肯定是已经携带在这个里边了

472
00:23:48,030 --> 00:23:51,570
所以呢，经过你的这个写入操作

473
00:23:51,690 --> 00:23:53,250
两阶段提交之后

474
00:23:53,670 --> 00:23:54,990
你的烟弹是

475
00:23:55,530 --> 00:23:57,840
基本都是位于这个说的CF

476
00:23:59,010 --> 00:24:02,340
啊这个啊，对你理解这个

477
00:24:04,830 --> 00:24:06,480
对你理解这个

478
00:24:06,840 --> 00:24:09,180
调优写入有什么帮助呢？

479
00:24:09,720 --> 00:24:10,890
就比如说

480
00:24:11,130 --> 00:24:12,210
你一个表

481
00:24:12,330 --> 00:24:17,010
是同样的一张表，你建一个索引和建十个索引

482
00:24:17,015 --> 00:24:20,490
最后导致了它的这个存储结构可能是不一样的

483
00:24:22,200 --> 00:24:23,070
那

484
00:24:23,760 --> 00:24:26,850
这样的话就对于你去调整每个

485
00:24:26,940 --> 00:24:29,760
CF里边儿能看出大小

486
00:24:30,180 --> 00:24:32,490
以及每个CF里边

487
00:24:32,580 --> 00:24:36,690
进行卡牌是要多少县城，这样式是有一些

488
00:24:38,370 --> 00:24:39,180
不同的

489
00:24:42,780 --> 00:24:44,100
那进入

490
00:24:44,130 --> 00:24:45,750
这节课的重点部分

491
00:24:46,710 --> 00:24:51,150
啊，就是分别从写入和读取方向去

492
00:24:52,050 --> 00:24:57,360
去探讨一下，我这个太空，v应该怎么样调优？在我这个负载下

493
00:24:57,365 --> 00:24:58,260
下午

494
00:24:58,380 --> 00:25:01,890
条有一些哪些参数是可以提升我这个性能的

495
00:25:03,300 --> 00:25:05,670
那你如果要调整的话，首先你得了解

496
00:25:05,700 --> 00:25:06,840
太快内部

497
00:25:06,845 --> 00:25:08,550
数据写入的一个流程

498
00:25:09,930 --> 00:25:12,600
那接下来就是你要分析你的瓶颈

499
00:25:13,440 --> 00:25:15,360
那你分析了瓶颈之后呢？

500
00:25:15,930 --> 00:25:17,820
她他到底是什么问题呢？

501
00:25:18,180 --> 00:25:19,620
是不是热点问题呢？

502
00:25:20,130 --> 00:25:22,830
那如果是热点问题，我应该怎么样调整呢？

503
00:25:23,430 --> 00:25:28,740
最后一部分就是我有哪些参数可以调整调整哪些参数在什么样的情况下去调整

504
00:25:28,745 --> 00:25:29,820
政治的参数

505
00:25:33,270 --> 00:25:34,890
好，我们看这个箭头

506
00:25:36,780 --> 00:25:37,500
啊？

507
00:25:37,560 --> 00:25:40,770
一个泰科威收到一个写入请求之后

508
00:25:41,370 --> 00:25:44,760
首先，它会经过一个叫sky就破了一个

509
00:25:45,840 --> 00:25:46,620
组建

510
00:25:46,920 --> 00:25:48,210
他干什么事情呢？

511
00:25:49,470 --> 00:25:51,600
它是进行写之前的一些

512
00:25:51,605 --> 00:25:52,920
约束校验

513
00:25:53,100 --> 00:25:54,840
因为我们是这次事故的

514
00:25:55,020 --> 00:25:55,920
所以呢？

515
00:25:56,520 --> 00:25:59,010
我们可能会需要检测一些

516
00:25:59,040 --> 00:26:00,990
写写冲突，比如说

517
00:26:01,080 --> 00:26:05,640
你有更新版本的数据已经写下去了，那你老的版本的这个

518
00:26:05,670 --> 00:26:07,860
写入肯定是不能成功的

519
00:26:09,900 --> 00:26:12,990
那如果说你用的并不是

520
00:26:13,260 --> 00:26:15,570
选三个的，一个接口的话

521
00:26:16,080 --> 00:26:17,700
比如说你没有用太低b

522
00:26:17,970 --> 00:26:20,460
只是用泰科威，并且通过

523
00:26:20,610 --> 00:26:21,270
这个

524
00:26:21,510 --> 00:26:23,520
还可以，可能他用的是

525
00:26:23,550 --> 00:26:24,900
若API的话

526
00:26:25,290 --> 00:26:28,830
那你就会跳过这个组件就直接到达

527
00:26:29,250 --> 00:26:31,080
洛夫特斯拉这个组件

528
00:26:33,540 --> 00:26:38,460
如果你使用的是啊泰迪b，你通过收购的方式去写入数据的话

529
00:26:38,670 --> 00:26:42,210
那必然你的写入会首先经过这个模块

530
00:26:43,140 --> 00:26:44,760
那这个模块对应

531
00:26:44,850 --> 00:26:47,040
他自己也有一些有一些参数

532
00:26:48,090 --> 00:26:50,310
最最最重要的就是一个

533
00:26:50,490 --> 00:26:54,360
它这个县城持有多少个县城就是这就是个破

534
00:26:54,450 --> 00:26:55,050
晒死

535
00:26:55,380 --> 00:26:56,580
没人的话

536
00:26:56,670 --> 00:26:59,100
在荷数小于16的时候，他是四

537
00:27:01,050 --> 00:27:03,660
呃，如果是大于16的话，它默认是八

538
00:27:06,030 --> 00:27:06,780
好

539
00:27:06,840 --> 00:27:08,550
当你这个数据写入

540
00:27:09,090 --> 00:27:10,890
经过了四感觉我破

541
00:27:11,010 --> 00:27:12,990
一个约束校验之后

542
00:27:13,890 --> 00:27:19,200
他会去把这个请求把这个数据写入的请求发到重复的思考这个模块

543
00:27:19,590 --> 00:27:21,090
他是干什么的呢？

544
00:27:21,360 --> 00:27:26,550
其实我们知道太亏，个个太亏，之间他通过重复的去复制数据呢？

545
00:27:27,960 --> 00:27:31,650
那这一部分呢？这个润肤的是多少？这个模块呢，就是

546
00:27:32,220 --> 00:27:33,720
处理乱停车

547
00:27:34,530 --> 00:27:36,000
这一层的一个

548
00:27:36,930 --> 00:27:37,890
啊任务

549
00:27:38,340 --> 00:27:40,800
就包括处理润肤他的消息

550
00:27:41,040 --> 00:27:43,440
以及去写软件的洛根

551
00:27:43,800 --> 00:27:45,150
这两部分的内容

552
00:27:45,960 --> 00:27:49,980
那处理消息的话，就包括以当然也包括就是你一个血来了

553
00:27:49,985 --> 00:27:51,300
我需要通过

554
00:27:51,305 --> 00:27:54,630
消息的方式去复制给其他的菜口味

555
00:27:55,320 --> 00:27:56,250
同时

556
00:27:57,030 --> 00:27:58,140
我需要去

557
00:27:58,500 --> 00:28:00,030
把我的乱死落个

558
00:28:00,180 --> 00:28:01,170
进行落盘

559
00:28:03,750 --> 00:28:07,770
这款这款呢？实际上有个参数叫做性格唠嗑

560
00:28:08,280 --> 00:28:10,410
这个默认是是

561
00:28:10,500 --> 00:28:12,210
钓鱼处的，也就是说

562
00:28:12,660 --> 00:28:13,530
我们

563
00:28:14,460 --> 00:28:15,870
太亏了写入

564
00:28:16,530 --> 00:28:17,280
是

565
00:28:17,550 --> 00:28:19,560
会落盘的会刷盘的

566
00:28:22,470 --> 00:28:23,850
当你这个

567
00:28:24,000 --> 00:28:28,020
日志被落盘之后，并且复制给大多数的太亏

568
00:28:28,025 --> 00:28:30,690
那大多数钛可以给你进行了回应

569
00:28:30,810 --> 00:28:33,210
那这个日子就进入了考斯特

570
00:28:33,300 --> 00:28:34,320
阶段

571
00:28:34,380 --> 00:28:35,970
那抗病的完之后

572
00:28:36,540 --> 00:28:39,780
场meet完之后的日志就可以进行

573
00:28:39,960 --> 00:28:40,920
跑出来了

574
00:28:41,520 --> 00:28:45,300
做派的意思就是说把你们协商好，要干的事情

575
00:28:46,740 --> 00:28:49,200
去做到你的状态机里边

576
00:28:49,680 --> 00:28:51,240
对于太空来说

577
00:28:51,360 --> 00:28:52,740
他的状态机

578
00:28:52,745 --> 00:28:55,380
就是存储数据的这个db

579
00:28:57,360 --> 00:28:58,980
啊，这个我不太呢就是

580
00:28:59,040 --> 00:29:04,170
去做你们之前协商好要做的那些事情，比如说你是要暴他一个t

581
00:29:04,890 --> 00:29:06,630
或者你要迪丽的一个k

582
00:29:07,140 --> 00:29:08,190
那这个

583
00:29:08,820 --> 00:29:12,060
拍这个组件就是干这个事情

584
00:29:15,930 --> 00:29:16,800
对于

585
00:29:18,450 --> 00:29:20,400
对于30之前的版本呢？

586
00:29:20,610 --> 00:29:22,050
这个软的土豆

587
00:29:22,110 --> 00:29:25,410
以及这个up太实际上是一个单线程

588
00:29:26,520 --> 00:29:31,830
那这样就会面临着当你写入压力比较大的时候，他们俩可能会成

589
00:29:31,835 --> 00:29:33,420
为一个系统的瓶颈

590
00:29:36,930 --> 00:29:37,770
当然

591
00:29:38,250 --> 00:29:42,720
对于30之后呢？实际上你是可以去调他是一个县城池

592
00:29:42,725 --> 00:29:46,020
这两个都是单独的一个县城值，也可以通过

593
00:29:46,110 --> 00:29:47,250
这两个参数

594
00:29:47,460 --> 00:29:48,900
去分别调整

595
00:29:49,590 --> 00:29:51,750
这个县城迟到一个大小

596
00:29:55,590 --> 00:30:00,720
好，我们看我们可以看到这张图，你的数据流式先流到四点就破

597
00:30:00,780 --> 00:30:02,520
然后再留到抓不死

598
00:30:02,580 --> 00:30:04,350
然后再流到你的，我不赖

599
00:30:04,530 --> 00:30:09,390
所以我们在排查一个写入瓶颈的时候，我们可以按照这个数据流的一个

600
00:30:09,870 --> 00:30:10,740
这个

601
00:30:11,400 --> 00:30:12,150
步骤

602
00:30:12,390 --> 00:30:13,920
先看上游

603
00:30:14,010 --> 00:30:16,290
这些组件有没有达到平静？

604
00:30:16,530 --> 00:30:19,470
如果说你上游的已经达到瓶颈了

605
00:30:19,620 --> 00:30:23,640
那你看下有时间上没什么意义，因为上游已经平静了你

606
00:30:23,730 --> 00:30:25,830
你看下面可能看不出什么问题

607
00:30:26,700 --> 00:30:30,510
所以你通过这个数据流的一个这样的方向

608
00:30:30,960 --> 00:30:33,930
来按照这个步骤去一个一个组件去排查

609
00:30:37,710 --> 00:30:38,460
好

610
00:30:38,730 --> 00:30:39,870
比如说

611
00:30:40,470 --> 00:30:41,460
这个例子中

612
00:30:42,990 --> 00:30:45,510
首先我看这个是旧破的CPU

613
00:30:46,740 --> 00:30:50,760
这个例子中，他大概是200，所以肯定是没有到瓶颈，对吧？

614
00:30:51,120 --> 00:30:53,640
但如果你看到你的集群上

615
00:30:53,880 --> 00:30:58,950
这个东西已经到达了，你配置的那个县城沭县县丞持数量的话

616
00:30:59,190 --> 00:31:01,890
那肯定需要再去调整这个参数了

617
00:31:05,370 --> 00:31:09,450
好，接下来我们会看乱世做的一个CPU情况

618
00:31:09,960 --> 00:31:10,890
以及

619
00:31:11,040 --> 00:31:12,210
我拍一个

620
00:31:12,690 --> 00:31:14,070
最飘的一个情况

621
00:31:15,840 --> 00:31:20,910
那你看他们看什么呢，对吧，你是看单个呢，还是看集体的？

622
00:31:21,840 --> 00:31:24,300
你首先需要看的是有没有？

623
00:31:25,200 --> 00:31:27,300
三个太亏，成为一个瓶颈

624
00:31:28,230 --> 00:31:31,650
同时，你要看他们的复杂是不是比较均衡？

625
00:31:32,940 --> 00:31:34,500
如果说你的复杂

626
00:31:35,220 --> 00:31:40,020
包括适时的所有，这边负债和欧普泰这边负载，如果它的负载

627
00:31:40,740 --> 00:31:41,520
真的话

628
00:31:41,940 --> 00:31:44,460
那你实际上就面临了一个热点的问题

629
00:31:44,465 --> 00:31:45,450
请说

630
00:31:45,690 --> 00:31:46,890
一个太亏

631
00:31:47,130 --> 00:31:49,500
可能会成为整个集群的一个瓶颈

632
00:31:50,940 --> 00:31:53,490
那你需要解决的并不是去加机器

633
00:31:54,300 --> 00:31:55,260
而是说

634
00:31:55,320 --> 00:31:58,860
这个瓶颈是怎么产生的？这个热点是怎么产生的？

635
00:31:58,865 --> 00:32:01,590
我能不能通过什么方式去消除这个热点？

636
00:32:02,040 --> 00:32:05,520
在这个例子中，当然这个是没有这个问题，没有这个热点问

637
00:32:05,760 --> 00:32:07,500
大家的CPU都比较均衡

638
00:32:08,700 --> 00:32:09,960
所以这是一个

639
00:32:10,170 --> 00:32:10,950
比较好

640
00:32:10,980 --> 00:32:12,330
比较好的一个case

641
00:32:12,870 --> 00:32:13,710
对于

642
00:32:13,830 --> 00:32:16,260
分布式系统比较油耗的一个case

643
00:32:20,970 --> 00:32:21,570
我想听

644
00:32:21,690 --> 00:32:22,380
好

645
00:32:22,860 --> 00:32:23,790
那

646
00:32:23,795 --> 00:32:27,630
接下来，你要分析写入平静，你应该分析什么地方呢？

647
00:32:29,100 --> 00:32:30,780
因为我们知道我们

648
00:32:32,010 --> 00:32:35,760
在这个衣服肚里面，我们会去盼盼的唠嗑

649
00:32:36,060 --> 00:32:37,890
而且这个过程会去刷盘

650
00:32:39,420 --> 00:32:41,910
然后在饿不累的时候，我们会去

651
00:32:41,940 --> 00:32:45,300
把我们院子的洛给你们内容去应用到状态机

652
00:32:45,480 --> 00:32:46,890
这两个都是

653
00:32:46,895 --> 00:32:50,460
在写入过程中，两个比较关键的一个步骤

654
00:32:51,300 --> 00:32:54,390
那如果任何一个步骤比较慢了

655
00:32:55,710 --> 00:32:58,170
那都有可能造成你的写入

656
00:32:58,650 --> 00:32:59,430
比较慢

657
00:33:00,330 --> 00:33:01,920
那我们应该怎么看他呢？

658
00:33:03,030 --> 00:33:03,960
在我们

659
00:33:04,020 --> 00:33:07,350
才可以古拉方向上有一个叫kat t IO的一个

660
00:33:08,880 --> 00:33:10,170
呃一个

661
00:33:10,290 --> 00:33:11,460
一个组

662
00:33:11,910 --> 00:33:13,170
看到记录了

663
00:33:14,460 --> 00:33:16,680
我盼着那个和我那个

664
00:33:17,580 --> 00:33:19,470
相关的一个岩石情况

665
00:33:19,890 --> 00:33:20,880
比如说

666
00:33:21,030 --> 00:33:22,230
在这个例子中

667
00:33:23,310 --> 00:33:25,200
我们可以看到，不拍落个

668
00:33:25,260 --> 00:33:26,580
有两台太亏

669
00:33:26,700 --> 00:33:28,410
他达到了500毫秒

670
00:33:29,700 --> 00:33:32,130
明显的高于其他的这个太贵

671
00:33:33,210 --> 00:33:35,610
所以呢，这个时候很可能

672
00:33:35,880 --> 00:33:37,020
这两个kv

673
00:33:37,680 --> 00:33:39,930
是造成整个集群慢的一个

674
00:33:40,020 --> 00:33:40,830
原因

675
00:33:42,210 --> 00:33:46,230
那你就需要去看这个太亏，她到底是什么原因？

676
00:33:46,320 --> 00:33:47,280
怎么慢？

677
00:33:48,360 --> 00:33:53,040
它不仅表现为这个我不太落个嘛，而且我盼着落本也比较慢

678
00:33:57,570 --> 00:34:01,770
好，这个例子中呢？当时这个是怎么样出现的呢？

679
00:34:02,070 --> 00:34:04,020
通过去查看这台

680
00:34:04,230 --> 00:34:08,760
这台机器因为泰国11和泰归12刚好是一台机器上

681
00:34:10,110 --> 00:34:14,130
当时去看的话，发现它的CPU已经漏的已经非常高了

682
00:34:15,180 --> 00:34:20,160
CPU已经被啊，因为那个机器上起了一个用户的一个其他的

683
00:34:20,520 --> 00:34:21,330
程序

684
00:34:21,750 --> 00:34:23,430
非常好，撕逼的一个程序

685
00:34:23,460 --> 00:34:26,160
导致留给他们这边的CPU特别少

686
00:34:27,210 --> 00:34:29,460
导致他这个上下文切换特别多

687
00:34:29,760 --> 00:34:31,470
整个系统的漏的

688
00:34:31,530 --> 00:34:32,550
非常高

689
00:34:32,970 --> 00:34:36,270
所以你实际上这个这两个太亏，干什么都慢？

690
00:34:40,980 --> 00:34:41,580
我想想

691
00:34:41,640 --> 00:34:42,240
好

692
00:34:43,560 --> 00:34:46,830
刚刚说的那个例子中，他耳畔下的洛克和斯诺克为什么吗？

693
00:34:46,860 --> 00:34:51,240
把通常情况下，你遇到判断洛克或者斯普洛克曼的时候

694
00:34:51,390 --> 00:34:53,040
你应该怎么排查呢？

695
00:34:53,070 --> 00:34:56,250
刚刚说了，你需要看这个机器是不是有什么问题？

696
00:34:56,730 --> 00:34:59,070
比如说磁盘写入是不是慢了？

697
00:34:59,220 --> 00:35:01,140
这批露的是不是很高了？

698
00:35:02,670 --> 00:35:03,660
同时

699
00:35:03,665 --> 00:35:08,160
需要看，因为这两个过程都是需要去写作词汇的

700
00:35:09,120 --> 00:35:12,300
一个是对应ABC d bac cb

701
00:35:12,305 --> 00:35:13,050
TV

702
00:35:13,530 --> 00:35:15,780
迪克斯对应这个乱世唯诺夫特

703
00:35:17,250 --> 00:35:20,910
比如说你是个pad慢，你就需要派的洛克曼的话

704
00:35:21,120 --> 00:35:24,930
说明他是写过的日志吗？那你就需要去看看洛夫特

705
00:35:25,560 --> 00:35:26,820
这个db下面

706
00:35:27,960 --> 00:35:30,000
它对应的这个软件绝对性

707
00:35:30,060 --> 00:35:30,960
是不是嘛？

708
00:35:33,870 --> 00:35:37,410
你看完这个摔的脚任性，慢慢之后呢？

709
00:35:37,680 --> 00:35:38,580
那你有

710
00:35:38,700 --> 00:35:44,010
还需要去看什么呢？需要去看这个ABB是不是有撕掉的情况？

711
00:35:44,400 --> 00:35:45,990
死掉是什么意思呢？

712
00:35:46,320 --> 00:35:49,170
就是刷卡比它本身有一个流控机制

713
00:35:49,590 --> 00:35:51,870
当触发了一些条件的时候

714
00:35:51,900 --> 00:35:54,480
他自己会去进行一些流控机制

715
00:35:54,600 --> 00:35:55,560
会把你

716
00:35:55,590 --> 00:35:57,150
外部的一个写入

717
00:35:57,180 --> 00:35:58,260
进行一个

718
00:35:58,470 --> 00:36:00,780
延迟或者说进行一个

719
00:36:00,990 --> 00:36:02,850
卡卡顿的一个情况

720
00:36:03,720 --> 00:36:06,930
同样的，如果判断的唠嗑和排卵可慢了

721
00:36:07,500 --> 00:36:09,450
你需要看的是你的盘

722
00:36:09,780 --> 00:36:12,300
你的ro up let选，是不是高？

723
00:36:12,570 --> 00:36:17,070
般的般的延迟是多少？你的碰的这个漏的是多高？

724
00:36:18,000 --> 00:36:20,310
如果异常的高于其他的话

725
00:36:20,460 --> 00:36:24,150
很可能你这个盘已经到达一个写入的一个瓶颈

726
00:36:24,540 --> 00:36:28,080
就要去看一下，为什么它的写入流量这么大？

727
00:36:28,170 --> 00:36:29,730
或者i ops怎么高？

728
00:36:34,440 --> 00:36:36,990
啊，这个就是那个例子里面

729
00:36:37,830 --> 00:36:39,120
碰到的那个问题

730
00:36:39,330 --> 00:36:41,400
这台机器，它有16个盒

731
00:36:41,790 --> 00:36:45,480
它的CPU基本被吃完了，然后他的漏得到了30多

732
00:36:46,890 --> 00:36:50,550
导致他这个你那个kv在这个上面干什么都慢？

733
00:36:51,060 --> 00:36:54,060
这个东西是通过哪个地方看的？是通过啊？

734
00:36:54,660 --> 00:36:58,350
呃，泰迪被古拉夫纳德诺克斯波尔能看到这个

735
00:36:58,560 --> 00:36:59,370
信息

736
00:37:03,570 --> 00:37:06,510
好，我们接下来讲一下这个热点问题

737
00:37:07,650 --> 00:37:09,600
前面我们讲到，如果一台

738
00:37:09,990 --> 00:37:15,150
一台他也会成为整个系统的瓶颈的话，你需要做的并不是去加机器

739
00:37:15,510 --> 00:37:17,700
而是去解决这个热点问题

740
00:37:17,940 --> 00:37:20,400
先看这个热点问题是怎么样？

741
00:37:20,820 --> 00:37:21,900
引发的

742
00:37:24,420 --> 00:37:25,530
举举个例子

743
00:37:26,580 --> 00:37:31,890
如果你的t mt或者萨克斯维尔戴斯，他有一个奥特因为们的ID

744
00:37:31,895 --> 00:37:32,940
这样的一个

745
00:37:33,570 --> 00:37:34,470
关键

746
00:37:34,680 --> 00:37:36,030
词修饰的话

747
00:37:36,420 --> 00:37:38,460
那它生成的这个t的话

748
00:37:38,490 --> 00:37:40,290
它实际上是一个

749
00:37:40,920 --> 00:37:42,570
呃，有序递增的

750
00:37:43,560 --> 00:37:45,510
比如说我们这个OK

751
00:37:45,660 --> 00:37:47,130
编码方案是这个样子的

752
00:37:47,370 --> 00:37:48,990
前面假设是固定的

753
00:37:49,200 --> 00:37:52,410
但是你这个YY第十一直网上这么迟增的

754
00:37:52,530 --> 00:37:54,120
那你拼出来这个k

755
00:37:54,150 --> 00:37:55,710
实际上，他也是

756
00:37:56,280 --> 00:37:58,560
从一个点往后这么挣上去呢？

757
00:37:58,860 --> 00:38:00,420
那这样会有什么问题呢？

758
00:38:00,750 --> 00:38:01,830
因为我们

759
00:38:01,980 --> 00:38:03,900
他的胃里边我们是通过

760
00:38:04,020 --> 00:38:06,480
T的范围进行划分

761
00:38:06,600 --> 00:38:08,310
划分成一个一个的冠军

762
00:38:09,000 --> 00:38:10,320
然后进行管理的

763
00:38:10,350 --> 00:38:11,490
一个瑞娟

764
00:38:12,000 --> 00:38:16,140
她只能一个人愿意等，它只能出现在一个户口本上

765
00:38:16,980 --> 00:38:22,260
那我们这些讲过一个瑞俊啊，它的写入和读取都是走低的人

766
00:38:22,650 --> 00:38:25,680
所以就会出现一种情况，就是我的写入

767
00:38:26,490 --> 00:38:30,240
我可能那个瑞景刚好管理到了这个这段区间

768
00:38:31,740 --> 00:38:36,480
那你的你的写入都是在这个区间的后边儿去了派的iPad

769
00:38:37,530 --> 00:38:40,440
那你就就会导致这样的情况你的写入

770
00:38:41,820 --> 00:38:43,500
先写到这个太口味

771
00:38:43,560 --> 00:38:47,070
这个泰国这个数据里面数据量多了之后他进行四倍

772
00:38:47,490 --> 00:38:50,850
CP的完之后，他再去把这些水军搬出去

773
00:38:51,300 --> 00:38:52,620
搬到其他的太贵

774
00:38:53,760 --> 00:38:56,250
那这样的话，时间就会面临一个问题

775
00:38:56,400 --> 00:38:59,160
你所有的负担，首先都打在这个太空上

776
00:38:59,730 --> 00:39:01,830
其次的话，你搬这些数据

777
00:39:02,250 --> 00:39:03,930
是会消耗很多资源的

778
00:39:07,080 --> 00:39:08,760
那这个问题怎么解决呢？

779
00:39:10,800 --> 00:39:11,580
啊？

780
00:39:12,180 --> 00:39:14,400
我们先看第二种这个热点问题

781
00:39:15,360 --> 00:39:17,250
就是比如说我的

782
00:39:18,150 --> 00:39:19,770
列叫阿飞的碳

783
00:39:19,980 --> 00:39:22,050
然后他内容呢，就是闹

784
00:39:22,860 --> 00:39:27,660
那你这样也会去面临一种啊，经过这个编码方式，我们知道

785
00:39:27,840 --> 00:39:29,370
我的音量是康康的

786
00:39:29,910 --> 00:39:30,840
也是

787
00:39:31,530 --> 00:39:32,790
有序递增的

788
00:39:34,530 --> 00:39:38,400
那这样也会面临着跟前面那个是一样的问题

789
00:39:38,610 --> 00:39:39,450
你的k

790
00:39:39,660 --> 00:39:41,760
可能会从一个人均

791
00:39:41,850 --> 00:39:44,400
在后边儿和判断，我判断判断

792
00:39:44,430 --> 00:39:46,860
那你的压力就可能会打在一个态度上

793
00:39:48,690 --> 00:39:50,370
那针对第一种情况

794
00:39:50,970 --> 00:39:52,170
针对OT

795
00:39:52,200 --> 00:39:53,400
热点问题

796
00:39:54,240 --> 00:39:55,410
我们有一个

797
00:39:55,680 --> 00:39:58,590
泰迪哔哩提供了一个下的肉rd壁纸

798
00:39:58,800 --> 00:40:00,270
这么一个参数

799
00:40:00,660 --> 00:40:02,160
那你创建表的时候

800
00:40:02,370 --> 00:40:04,170
可以去指定这个参数

801
00:40:05,190 --> 00:40:06,330
那这个

802
00:40:06,420 --> 00:40:07,620
是什么意思呢？

803
00:40:08,730 --> 00:40:10,320
就是我的热爱地

804
00:40:10,800 --> 00:40:11,910
分两部分

805
00:40:13,200 --> 00:40:15,210
那头这部分呢？

806
00:40:16,740 --> 00:40:18,030
我是随机的

807
00:40:20,250 --> 00:40:21,360
那后面呢？

808
00:40:21,450 --> 00:40:23,700
还是一样的，我是递增的

809
00:40:24,900 --> 00:40:27,120
那通过头部的随机

810
00:40:28,110 --> 00:40:31,020
那你生产的时候可能就会

811
00:40:31,470 --> 00:40:33,090
比如说这个地方是四

812
00:40:33,900 --> 00:40:37,350
那你就可能会被吓得成16片

813
00:40:38,310 --> 00:40:41,100
你的写入呢，就可能是16个冠军的

814
00:40:41,105 --> 00:40:41,790
后边

815
00:40:43,050 --> 00:40:45,540
它通过把这些16个冠军

816
00:40:45,780 --> 00:40:48,690
进行分散的话，实际上你的复杂就可以

817
00:40:48,840 --> 00:40:49,710
分散了

818
00:40:50,760 --> 00:40:54,030
当然不是所有情况都能用这个参数的

819
00:40:54,720 --> 00:40:56,730
只有在你没有

820
00:40:57,540 --> 00:40:58,380
指定

821
00:40:59,310 --> 00:41:01,260
一个硬硬的主见

822
00:41:05,970 --> 00:41:06,570
我想听

823
00:41:07,410 --> 00:41:11,100
这种情况下，你才能使用，也就是这个热爱的并不是

824
00:41:11,550 --> 00:41:15,420
你的一个啊，比如说你的你的MM p？

825
00:41:15,540 --> 00:41:17,430
对于印度的一个列

826
00:41:17,790 --> 00:41:19,470
而是说泰迪b内部

827
00:41:19,650 --> 00:41:22,560
生成的一个你的排名可能可能是

828
00:41:23,460 --> 00:41:24,720
几个字段？

829
00:41:25,530 --> 00:41:27,180
进行了一个联合索引

830
00:41:27,960 --> 00:41:29,700
那泰迪b内部

831
00:41:29,730 --> 00:41:33,630
它实际上是通过热爱滴来去阻止你的数据

832
00:41:34,710 --> 00:41:36,690
所以它内部会生成一个

833
00:41:37,170 --> 00:41:38,880
这样的热爱的

834
00:41:39,060 --> 00:41:41,730
一个有绿色的肉，还得去组织你所有的数据

835
00:41:41,790 --> 00:41:44,730
把你的团队的联合团没t

836
00:41:45,450 --> 00:41:46,320
就是

837
00:41:46,380 --> 00:41:48,330
一个瘾大克的一个方式

838
00:41:48,510 --> 00:41:51,180
而是指向你的这边的肉还低

839
00:41:53,190 --> 00:41:55,500
那在这种情况下，你才能去使用

840
00:41:56,370 --> 00:41:57,360
这个选项

841
00:42:00,810 --> 00:42:01,680
好

842
00:42:01,770 --> 00:42:06,720
那有了这个之后呢？实际上我们霹雳会去动态地去

843
00:42:07,800 --> 00:42:11,370
分钟我太亏，每个月亏每个瑞俊他的这个

844
00:42:11,490 --> 00:42:13,350
读和写的流量的情况

845
00:42:13,710 --> 00:42:19,020
开亏会定期的去上报，这个把这个信息定期的上报给霹雳

846
00:42:19,200 --> 00:42:21,870
基地来去进行分析统计

847
00:42:22,530 --> 00:42:24,180
来去识别这些

848
00:42:24,210 --> 00:42:25,200
写入

849
00:42:25,530 --> 00:42:27,840
一直持续的一些为准

850
00:42:28,110 --> 00:42:31,860
然后尝试把这些瑞俊尽量的去分散看

851
00:42:32,190 --> 00:42:33,240
找到一个

852
00:42:33,600 --> 00:42:34,530
复杂

853
00:42:34,860 --> 00:42:36,060
均衡的一个

854
00:42:36,540 --> 00:42:37,260
目的

855
00:42:41,550 --> 00:42:43,650
好讲到写入

856
00:42:43,920 --> 00:42:47,910
你最后你的key都是要写到底层的USB里面

857
00:42:47,915 --> 00:42:53,220
那你肯定是需要对乱死的病进行一些了解，并对它的一些参数进行一些

858
00:42:53,225 --> 00:42:53,820
家

859
00:42:54,120 --> 00:42:55,440
理解和

860
00:42:56,340 --> 00:42:58,590
可能会需要进行一些调整

861
00:42:59,220 --> 00:43:00,300
比如说

862
00:43:00,750 --> 00:43:04,200
还有几个参数，第一个参数是麦克斯卡卡卡卡

863
00:43:04,920 --> 00:43:06,390
那这个是什么意思呢？

864
00:43:07,800 --> 00:43:09,780
在威斯dd里面

865
00:43:09,960 --> 00:43:12,720
它分为很多层从l0到ll

866
00:43:13,020 --> 00:43:16,590
然而他的数据是可能会有over lab特

867
00:43:17,100 --> 00:43:19,800
还有1到26的数据是没有未来不同

868
00:43:19,860 --> 00:43:20,640
所以

869
00:43:20,645 --> 00:43:25,950
查了一到@六，他是很容易进行并行的卡牌池我只需要去

870
00:43:26,400 --> 00:43:27,690
按不同的转矩

871
00:43:27,900 --> 00:43:30,030
去生成不同的卡牌去舅舅好不好？

872
00:43:30,240 --> 00:43:32,010
就可以达到并行的

873
00:43:32,160 --> 00:43:32,910
这个

874
00:43:33,030 --> 00:43:33,690
目的

875
00:43:33,720 --> 00:43:35,820
但是呢，对于拿到零来说

876
00:43:36,420 --> 00:43:37,320
是

877
00:43:38,580 --> 00:43:43,890
有些问题的，因为安乐龄的话，她的这个文件是有可能有ov love，有时候有重叠

878
00:43:44,460 --> 00:43:46,980
你不能通过简单的这个划分数据

879
00:43:47,130 --> 00:43:48,570
去进行这个

880
00:43:48,750 --> 00:43:50,400
并行的多个烤盘纸

881
00:43:51,180 --> 00:43:52,560
所以

882
00:43:52,830 --> 00:43:55,170
通常情况下，还不是零呢

883
00:43:55,530 --> 00:43:56,790
只有一个

884
00:43:57,000 --> 00:43:58,470
她妈群，你再进行

885
00:43:58,830 --> 00:44:00,660
那如果说我就看看群

886
00:44:00,930 --> 00:44:03,660
完全由一个县承担，县城这么处理的话

887
00:44:03,930 --> 00:44:06,030
当我写入流量比较大的时候

888
00:44:06,060 --> 00:44:11,310
很可能我的这个整个数据整理着这个过程的瓶颈就出现在

889
00:44:11,430 --> 00:44:12,660
整理l0

890
00:44:14,370 --> 00:44:16,170
还有你的数据，这一部分

891
00:44:16,920 --> 00:44:19,560
那它提供了一个麦克斯卡卡卡卡卡

892
00:44:19,650 --> 00:44:21,930
这个接口值啊，这个参数之后

893
00:44:22,500 --> 00:44:24,060
你就可以去调整

894
00:44:24,120 --> 00:44:28,020
如果l0他在进行一个比较大的一个坎儿，肯定

895
00:44:29,100 --> 00:44:30,120
你可以

896
00:44:30,660 --> 00:44:32,400
同时起，多个县城

897
00:44:33,180 --> 00:44:36,660
去对这个教室进行处理，那他怎么处理呢？

898
00:44:37,830 --> 00:44:40,830
还是在内部进行这个数据的划分

899
00:44:42,360 --> 00:44:46,770
比如说我这个第一个线程处理领导100，第二个线程处理100到

900
00:44:46,800 --> 00:44:47,520
200

901
00:44:48,840 --> 00:44:49,890
来这么划分

902
00:44:50,880 --> 00:44:51,870
那跟

903
00:44:52,560 --> 00:44:55,290
进行的多个卡牌群就要

904
00:44:55,470 --> 00:44:57,690
有什么区别呢，首先

905
00:44:58,440 --> 00:45:02,220
他在内部的这多个县城，他是需要相互等待的

906
00:45:02,490 --> 00:45:04,800
还需要多个县城完成之后

907
00:45:06,000 --> 00:45:07,440
这个任务才能完成

908
00:45:07,740 --> 00:45:12,780
但是如果说你是位于ll 1到l6之间的卡，不去的话

909
00:45:13,020 --> 00:45:14,070
虽然我

910
00:45:14,190 --> 00:45:18,060
每个卡牌群，他处理范围不一样，她就可以完全并行起来

911
00:45:18,090 --> 00:45:20,190
而且他们不需要相互等待

912
00:45:22,320 --> 00:45:26,580
所以那样的效果肯定是更好的，但是由于阿拉丁的特殊存在

913
00:45:28,410 --> 00:45:33,720
所以他只能把这个一个大的看看开开要来拆分成多个看不太

914
00:45:34,830 --> 00:45:35,580
进行

915
00:45:36,150 --> 00:45:37,260
多现场的处理

916
00:45:37,920 --> 00:45:39,660
那这个东西有什么用处呢？

917
00:45:39,840 --> 00:45:42,120
在后面讲那个死掉的时候

918
00:45:42,150 --> 00:45:44,160
讲他留空的时候，我们可能会

919
00:45:44,730 --> 00:45:45,960
用上这个参数

920
00:45:47,460 --> 00:45:51,390
当他你设置的这个是二或者是三四的时候

921
00:45:52,140 --> 00:45:54,180
你可以加快l0

922
00:45:54,300 --> 00:45:55,470
他们还没叫过

923
00:45:57,450 --> 00:45:58,770
这个进程

924
00:45:59,010 --> 00:46:00,090
啊，这个进度

925
00:46:00,600 --> 00:46:03,600
使l0的数据尽快地往下去

926
00:46:04,260 --> 00:46:05,070
刘

927
00:46:05,160 --> 00:46:08,010
尽快地把100的数据库续到下面去

928
00:46:10,020 --> 00:46:14,880
好，那第二个比较关心大家比较关心的参数呢？可能就是这个压缩算法

929
00:46:15,300 --> 00:46:18,330
因为在迪斯尼里面数据是

930
00:46:18,540 --> 00:46:19,560
有压缩的

931
00:46:21,750 --> 00:46:24,540
他每一层，你可以配置不同的压缩算法

932
00:46:24,780 --> 00:46:25,530
比如说

933
00:46:25,590 --> 00:46:26,850
默认情况下

934
00:46:27,090 --> 00:46:28,950
我们头两层是没有压缩

935
00:46:29,070 --> 00:46:32,070
中间三层，我们是local的方式去压缩

936
00:46:32,340 --> 00:46:36,870
然后最低最底下两层，我们使用get t去压缩的

937
00:46:36,930 --> 00:46:38,250
这个压缩算法

938
00:46:38,610 --> 00:46:41,520
这个git t肯定是比还有这个

939
00:46:42,900 --> 00:46:45,900
压缩率是更高，但是他更费CPU

940
00:46:47,190 --> 00:46:47,940
所以

941
00:46:49,350 --> 00:46:53,970
当你分析到你的你的这个系统瓶颈的时候，发现阿娇，如果是瓶颈

942
00:46:54,090 --> 00:46:56,040
但是CPU还比较富裕的时

943
00:46:56,220 --> 00:46:58,920
你就可以去考虑修改压缩

944
00:46:58,925 --> 00:47:01,140
这个方式怎么改呢？

945
00:47:01,290 --> 00:47:05,190
比如说，你把这两个l0和lI改成lj 4

946
00:47:05,610 --> 00:47:06,960
或者是这个

947
00:47:07,260 --> 00:47:11,880
中间的这三层改成更高的这个压缩算法，比如说改成这样TT

948
00:47:12,180 --> 00:47:13,170
那你这样

949
00:47:13,350 --> 00:47:14,640
通过压缩

950
00:47:14,940 --> 00:47:15,660
那

951
00:47:15,810 --> 00:47:17,880
到达磁盘上的lr

952
00:47:18,150 --> 00:47:19,590
就更少了

953
00:47:20,040 --> 00:47:22,440
那你lo的资源呢，可能就能忙过来

954
00:47:22,530 --> 00:47:23,280
但是

955
00:47:23,285 --> 00:47:25,020
你的CPU就上去了

956
00:47:25,080 --> 00:47:26,280
所以这是一个

957
00:47:26,340 --> 00:47:27,210
缺多少？

958
00:47:27,270 --> 00:47:28,680
你需要根据你的

959
00:47:28,740 --> 00:47:30,930
这个机器负载的情况

960
00:47:31,080 --> 00:47:33,360
那你哪一个东西是你的平静？

961
00:47:33,540 --> 00:47:35,190
如果你的CPU是平静

962
00:47:35,580 --> 00:47:37,470
那你就需要反过来

963
00:47:38,670 --> 00:47:41,160
你去啊，释放你的CPU志愿

964
00:47:41,460 --> 00:47:43,650
而且更好地确定用你的IO资源

965
00:47:48,570 --> 00:47:51,180
那下面这个三个参数是干什么用的呢？

966
00:47:52,170 --> 00:47:54,120
啊，我之前讲的过就是

967
00:47:54,810 --> 00:47:57,630
不是他她自己有一个留空的模式

968
00:47:58,140 --> 00:47:59,010
当你

969
00:47:59,310 --> 00:48:04,620
数据量写的太多的时候，导致她下面整理不过来的时候她会去进行一些留空

970
00:48:04,800 --> 00:48:06,090
那这些表现为

971
00:48:08,730 --> 00:48:10,800
如果你的I60的文件

972
00:48:10,950 --> 00:48:12,720
到达一定数量的时候

973
00:48:13,320 --> 00:48:16,320
因为丫头领的文件是可能会有ov na不同

974
00:48:16,500 --> 00:48:21,810
如果你的I20的文件特别多的话，实际上是我影响到你的读性能

975
00:48:22,170 --> 00:48:23,070
所以呢？

976
00:48:23,640 --> 00:48:25,080
他有个这样的参数

977
00:48:25,770 --> 00:48:28,260
默认的话，这个是20

978
00:48:28,290 --> 00:48:31,530
当年，安乐林的文件到达20的时候，他会去尝试

979
00:48:31,590 --> 00:48:32,700
去进行流控

980
00:48:32,820 --> 00:48:33,840
进行死掉

981
00:48:34,860 --> 00:48:39,390
如果你的AI格林的文件到达了这个限制的话，比如说36

982
00:48:39,750 --> 00:48:41,640
那他会去卡住

983
00:48:41,670 --> 00:48:43,890
直到这个条件不满足之后

984
00:48:44,160 --> 00:48:46,620
才会去把你外部的这个写入

985
00:48:46,950 --> 00:48:47,730
放开

986
00:48:52,440 --> 00:48:53,220
好

987
00:48:54,390 --> 00:48:59,430
我们来进入这个拉丝比他为什么会进行呃他进行流控？

988
00:48:59,820 --> 00:49:02,250
是在哪一层进行流控呢？

989
00:49:04,470 --> 00:49:07,560
首先，你可以通过搜索得领这个日志

990
00:49:08,850 --> 00:49:12,360
在罗斯蒂的这个日志里面搜索这个司令这个关键字

991
00:49:12,660 --> 00:49:15,090
来去找到具体的一个原因

992
00:49:15,540 --> 00:49:19,080
它有三种原因，首先是按照零文件太多

993
00:49:19,680 --> 00:49:21,990
刚说了，你拿了零文件太多的话

994
00:49:22,710 --> 00:49:24,750
会影响到你的读性能

995
00:49:25,650 --> 00:49:29,160
所以这个时候如果你遇到这种情况，你应该怎么调整呢？

996
00:49:29,165 --> 00:49:31,650
你应该尽快地把ll的文件

997
00:49:31,680 --> 00:49:33,180
往下推对吧？

998
00:49:33,330 --> 00:49:34,260
所以呢？

999
00:49:34,500 --> 00:49:36,630
这个时候呢，你可以通过这个参数

1000
00:49:36,990 --> 00:49:38,400
I卡卡卡卡卡

1001
00:49:38,880 --> 00:49:42,030
比如说加快点罗林文件往下推的一个速度

1002
00:49:45,450 --> 00:49:48,210
那第二个参数呢？就是这两个参数

1003
00:49:48,810 --> 00:49:52,230
那你调整这两个参数，那一定是说

1004
00:49:52,410 --> 00:49:53,160
你

1005
00:49:53,280 --> 00:49:56,670
由于l0文件太多，导致流控

1006
00:49:57,600 --> 00:49:59,610
这个情况呢，不是经常出现

1007
00:50:00,360 --> 00:50:03,810
而只是由于我的业务的高峰期

1008
00:50:03,930 --> 00:50:05,100
写入比较猛

1009
00:50:06,450 --> 00:50:09,630
而且呢，你对于你的读的这个岩石呢可能

1010
00:50:10,050 --> 00:50:13,410
也不是那么很可能容忍度也比较高

1011
00:50:13,415 --> 00:50:14,790
这个时候你就可以去

1012
00:50:14,970 --> 00:50:16,320
把它删掉了

1013
00:50:16,620 --> 00:50:18,660
这个条件放宽一点

1014
00:50:18,930 --> 00:50:20,850
你知道这个东西肯定会

1015
00:50:21,360 --> 00:50:25,650
舅舅在后期的这个数据整理过程中肯定是来得及的

1016
00:50:26,190 --> 00:50:27,540
你就可以把这个东西

1017
00:50:28,350 --> 00:50:30,000
这两个参数调大一点

1018
00:50:30,330 --> 00:50:32,070
用来缓冲你的

1019
00:50:32,100 --> 00:50:33,120
业务疯子

1020
00:50:35,580 --> 00:50:39,840
那第二个触发拉斯彼留空的一个条件呢就是

1021
00:50:39,900 --> 00:50:41,700
你的妈妈们退货个数太多

1022
00:50:42,780 --> 00:50:47,250
如果你的妈妈贴不够数太多的话，谁让你占用的内存也就越多？

1023
00:50:48,390 --> 00:50:53,550
那为什么卖萌贴布会比较多呢？很可能就是你卖萌大有福有福落隧道

1024
00:50:53,730 --> 00:50:55,260
还是替代这个过程

1025
00:50:55,320 --> 00:50:57,450
比如说我的瓷盘LOL了

1026
00:50:58,050 --> 00:50:59,970
布拉克斯拉斯比较慢

1027
00:51:00,180 --> 00:51:03,870
但是呢，我瞬间我写入的数据量呢？又特别特别多

1028
00:51:07,230 --> 00:51:11,670
如果这个情况同样的原理，如果这个情况不是经常出现，而只是说

1029
00:51:11,790 --> 00:51:13,530
在一个业务峰值期

1030
00:51:14,460 --> 00:51:18,420
会有这个问题的话，那你就可以去调整麦克斯不是把他的房本

1031
00:51:18,690 --> 00:51:20,700
就把他那个谷值调大

1032
00:51:21,300 --> 00:51:23,190
去缓冲，你这个业务，疯子

1033
00:51:23,910 --> 00:51:26,310
如果说你长期的这个flag

1034
00:51:27,390 --> 00:51:30,570
或者磁盘满足不了这个佛拉斯的这个要求

1035
00:51:30,900 --> 00:51:34,710
那实际上你调大这个最终还是会触发这个

1036
00:51:35,460 --> 00:51:39,510
他的由于这个慢慢退步太多而进行流控的一个限制

1037
00:51:40,740 --> 00:51:42,450
那时候你就需要考虑

1038
00:51:43,380 --> 00:51:44,850
啊，我是不是要扩容？

1039
00:51:45,660 --> 00:51:49,410
或者说我需要换个更好的盘，由于我的盘

1040
00:51:49,530 --> 00:51:51,270
刷新的这个速度太慢

1041
00:51:53,490 --> 00:51:55,440
好，第三个条件呢，可能就是

1042
00:51:56,520 --> 00:51:59,010
不要随便他认为他在

1043
00:51:59,520 --> 00:52:02,160
底层这个结构呢，不是很好

1044
00:52:02,670 --> 00:52:06,090
它需要进行卡牌群的数据量特别大

1045
00:52:06,690 --> 00:52:11,100
什么意思呢？就是为了达到标准的那个塔形结构

1046
00:52:11,880 --> 00:52:14,130
我可能需要干很大量的工作

1047
00:52:14,550 --> 00:52:15,750
才能达到那个

1048
00:52:15,810 --> 00:52:16,590
条件

1049
00:52:17,130 --> 00:52:18,720
那他就会去

1050
00:52:19,110 --> 00:52:20,280
进行一个死掉

1051
00:52:20,550 --> 00:52:22,380
但是这是什么逻辑呢？就是

1052
00:52:23,400 --> 00:52:28,710
我下面已经很乱了，我现在整整理不过来，你再给我来大量的数据的话实际

1053
00:52:28,715 --> 00:52:29,490
上

1054
00:52:29,910 --> 00:52:31,110
我也处理不过来

1055
00:52:31,260 --> 00:52:32,340
那还不如

1056
00:52:33,000 --> 00:52:35,550
你先登着，整理完你再往下写

1057
00:52:36,750 --> 00:52:42,060
同时，当然，如果你偶尔遇到这个情况并不是经常有这个情况的话，你也是可以

1058
00:52:42,065 --> 00:52:43,170
有些参数

1059
00:52:43,380 --> 00:52:45,540
可以把这个限制稍微放开一点

1060
00:52:45,990 --> 00:52:48,120
默认的话，这个是64g

1061
00:52:49,440 --> 00:52:51,030
啊比如说你可以改成

1062
00:52:53,070 --> 00:52:54,300
一把18g

1063
00:52:58,200 --> 00:52:59,250
如果说你

1064
00:52:59,255 --> 00:53:02,730
经常遇到这个情况，而且你的歪理比较大的话

1065
00:53:03,390 --> 00:53:04,620
可能是

1066
00:53:04,890 --> 00:53:08,850
比如说你的大标题，导致你的这个血放大特别大

1067
00:53:08,970 --> 00:53:11,100
导致这个磁盘啊，我忙不过来

1068
00:53:11,190 --> 00:53:13,590
那他整理数据的人过程整理不过来

1069
00:53:14,010 --> 00:53:16,590
她在这个情况下我们推荐你去

1070
00:53:17,040 --> 00:53:17,970
使用

1071
00:53:18,180 --> 00:53:18,870
泰坦

1072
00:53:19,170 --> 00:53:21,360
那他是一个什么东西呢？她是吧？

1073
00:53:21,930 --> 00:53:23,160
你的大白兔

1074
00:53:23,730 --> 00:53:26,880
从你的阿拉桑椹里面分离出来单独

1075
00:53:27,030 --> 00:53:27,900
管理起来

1076
00:53:27,960 --> 00:53:29,400
是以洛克的形式

1077
00:53:29,580 --> 00:53:30,420
管理起来

1078
00:53:30,960 --> 00:53:34,500
这个对于减少我们的血放大是非常

1079
00:53:34,650 --> 00:53:35,580
有好处的

1080
00:53:38,040 --> 00:53:38,820
好

1081
00:53:38,970 --> 00:53:40,680
讲完了，写之后呢？

1082
00:53:40,710 --> 00:53:43,740
同样的，我们讲一下读取是怎么样优化的？

1083
00:53:44,790 --> 00:53:46,200
同样分为三部分

1084
00:53:46,260 --> 00:53:47,490
第一部分就是

1085
00:53:47,940 --> 00:53:49,410
总体流程是怎么样子的？

1086
00:53:50,490 --> 00:53:54,720
而接下来就是我怎么样分析我的这个毒品警对吧？

1087
00:53:55,590 --> 00:53:58,080
那我找到瓶颈了，我应该怎么调整？

1088
00:54:02,190 --> 00:54:06,510
读的话呢，可能比写呢，这个流程可能稍微简单一点

1089
00:54:06,720 --> 00:54:07,740
因为他是

1090
00:54:08,550 --> 00:54:11,610
它是通过历史读她通过例的那个

1091
00:54:13,170 --> 00:54:14,370
校验之后呢？

1092
00:54:14,610 --> 00:54:15,960
他就可以进行读了

1093
00:54:16,140 --> 00:54:18,240
所以那部分先我们先省掉了

1094
00:54:18,420 --> 00:54:21,300
然后看可能会成为平静的一个地方

1095
00:54:22,080 --> 00:54:23,760
啊独醒就来了之后呢？

1096
00:54:24,030 --> 00:54:27,930
他过去，如果是kv读他回去发到这个多多人去

1097
00:54:28,260 --> 00:54:29,100
非得破

1098
00:54:29,790 --> 00:54:33,360
如果是下垂的读呢，就是前面我们看到的

1099
00:54:33,390 --> 00:54:35,130
你是蛇口的一个AP

1100
00:54:35,940 --> 00:54:39,480
他会去下推给靠谱三色的一个瑞德堡

1101
00:54:40,440 --> 00:54:43,590
那这两个人的破呢？最终他都会去

1102
00:54:43,595 --> 00:54:44,700
从这个

1103
00:54:45,210 --> 00:54:46,950
提笔里面去取数据

1104
00:54:50,220 --> 00:54:52,020
好，我们可以看到

1105
00:54:52,230 --> 00:54:54,390
这两个池子呢？

1106
00:54:55,410 --> 00:54:56,820
组曲的池子呢？

1107
00:54:56,850 --> 00:55:00,330
实际上是由两个对应的参数来进行调整的

1108
00:55:01,080 --> 00:55:03,150
有时候累的差点死多了一句

1109
00:55:03,270 --> 00:55:05,490
调整的就是所有的均未破

1110
00:55:05,670 --> 00:55:06,360
他

1111
00:55:06,420 --> 00:55:07,800
内部现场的个数

1112
00:55:09,150 --> 00:55:12,360
一个县城啊，这个里边呢？又分为

1113
00:55:12,660 --> 00:55:15,300
按优先级分为这个高优先级的

1114
00:55:15,330 --> 00:55:17,670
池子和通常邮件及以及

1115
00:55:18,180 --> 00:55:19,860
低优先级的一个池子

1116
00:55:20,190 --> 00:55:22,950
一般你的手表的一些操作呢？

1117
00:55:23,400 --> 00:55:26,820
会放在这个低优先级的一个池子里面进行处理

1118
00:55:27,960 --> 00:55:29,910
那比比较高的一些

1119
00:55:30,330 --> 00:55:31,110
啊？

1120
00:55:31,115 --> 00:55:33,660
高于县级的一些请求呢，会放在一个

1121
00:55:34,320 --> 00:55:35,100
嗨

1122
00:55:35,130 --> 00:55:38,280
这个看看生气的一个池子里面进行处理

1123
00:55:38,310 --> 00:55:43,020
包括比如说系统中，你要去查一下什么系统变量啊，或者什么的

1124
00:55:43,050 --> 00:55:44,070
你不能因为

1125
00:55:44,610 --> 00:55:47,370
嫂，表这种操作，而把你自己给卡住了

1126
00:55:50,880 --> 00:55:54,990
考科目三的这边也是一样的，分为三个优先级的尺子

1127
00:55:55,530 --> 00:55:56,940
那默认的话呢？

1128
00:55:58,080 --> 00:55:59,490
我不是说这个

1129
00:55:59,760 --> 00:56:01,620
池子的大小呢就是

1130
00:56:02,400 --> 00:56:07,410
80%乘以你的核心数量，如果没有如果你没有配置的话

1131
00:56:12,120 --> 00:56:12,720
我想听

1132
00:56:13,110 --> 00:56:13,770
好

1133
00:56:14,340 --> 00:56:15,510
我们知道

1134
00:56:16,620 --> 00:56:19,410
你的读取肯定是走的那两个池子

1135
00:56:20,220 --> 00:56:21,030
那

1136
00:56:21,390 --> 00:56:22,980
我怎么看我的瓶颈？

1137
00:56:23,310 --> 00:56:25,860
有没有到呢？这两个池子是不是平静呢？

1138
00:56:26,490 --> 00:56:29,460
也可以通过观察你的这个太亏了

1139
00:56:29,550 --> 00:56:30,660
除了CPU

1140
00:56:31,200 --> 00:56:32,760
这个指标来看

1141
00:56:32,820 --> 00:56:33,960
我目前

1142
00:56:34,590 --> 00:56:36,240
可不下载CPU是多少？

1143
00:56:36,600 --> 00:56:39,240
多少人就是瑞德堡？这个CP o是多少？

1144
00:56:39,300 --> 00:56:40,530
比如说这个例子中

1145
00:56:41,700 --> 00:56:45,240
我主要请求可能走的都是下垂的请求，所以我这个

1146
00:56:45,630 --> 00:56:47,280
考不下来的，CPU，比较高

1147
00:56:47,520 --> 00:56:48,450
我这个

1148
00:56:48,720 --> 00:56:51,270
所有人都破呢，基本没什么CPU

1149
00:56:52,830 --> 00:56:55,290
好，这个时候如果你

1150
00:56:56,190 --> 00:56:57,450
有没有看这个？

1151
00:56:57,780 --> 00:57:02,400
你直接去调这个瑞士库尔斯托瑞斯是这个噗，那你肯定是没什么用的

1152
00:57:02,730 --> 00:57:04,680
因为你没有对症下药

1153
00:57:04,770 --> 00:57:07,170
你现在的可能你的瓶颈在这块

1154
00:57:08,100 --> 00:57:10,530
所以呢，你第一部，你要看你

1155
00:57:10,800 --> 00:57:12,810
是什么样的请求为主？

1156
00:57:12,990 --> 00:57:13,860
他

1157
00:57:13,920 --> 00:57:18,660
发到了这个可不下载的这个池子呢，还是多了一个人突破这个池子

1158
00:57:19,260 --> 00:57:21,090
如果某一个辞职

1159
00:57:21,120 --> 00:57:23,730
它的CPU已经到达了设定的那个

1160
00:57:24,120 --> 00:57:26,220
现成数上线的话

1161
00:57:26,520 --> 00:57:30,510
那可能平静已经在这个圈子了，你需要去调整这个池子的大小

1162
00:57:35,220 --> 00:57:36,750
那怎么调呢？

1163
00:57:36,930 --> 00:57:39,180
是不是我这个调的越高越好呢？

1164
00:57:39,990 --> 00:57:41,100
那肯定不是的

1165
00:57:42,510 --> 00:57:43,800
也是有一个

1166
00:57:44,790 --> 00:57:47,100
有一些这个规则呢，首先

1167
00:57:50,130 --> 00:57:51,180
你这个

1168
00:57:51,270 --> 00:57:54,810
线程池的大小不能超过你的核心个数

1169
00:57:55,200 --> 00:57:57,510
因为如果超过你的核心，更熟的话

1170
00:57:58,200 --> 00:58:00,570
那你可能就会来回切换来回切换

1171
00:58:00,930 --> 00:58:05,220
导致这个系统的切换的开销可能占了很大一部分

1172
00:58:05,730 --> 00:58:06,990
实际上性能

1173
00:58:07,050 --> 00:58:08,280
反倒下降了

1174
00:58:09,570 --> 00:58:12,060
同时，你要另一个原则就是

1175
00:58:12,210 --> 00:58:13,620
你这个县城个数

1176
00:58:14,250 --> 00:58:15,450
老师能够

1177
00:58:15,570 --> 00:58:18,000
超过你峰值的那个情况

1178
00:58:19,140 --> 00:58:21,780
如果说你看握不住你峰值的情况情况

1179
00:58:21,870 --> 00:58:27,180
那你可能峰值的来临的时候，你这个累赘，所以会由于排队由于池子的数量不够

1180
00:58:27,570 --> 00:58:29,910
而且已经排队导致延迟的增高

1181
00:58:34,620 --> 00:58:35,220
我想听

1182
00:58:36,030 --> 00:58:36,720
好

1183
00:58:36,960 --> 00:58:38,670
同时，你要看一下

1184
00:58:39,090 --> 00:58:42,720
我这个独在各个太空为之间有没有这个？

1185
00:58:42,725 --> 00:58:43,800
热点问题

1186
00:58:44,730 --> 00:58:46,230
比如说我这个瑞破破

1187
00:58:48,090 --> 00:58:49,920
比如说科比三色这个铺

1188
00:58:50,280 --> 00:58:51,810
他有没有热点问题啊？

1189
00:58:52,020 --> 00:58:53,460
是不是比较均衡的？

1190
00:58:53,640 --> 00:58:55,050
比如说在这个点

1191
00:58:55,500 --> 00:58:58,080
他可能这个有两台太亏，比较忙

1192
00:58:58,470 --> 00:59:00,990
他他请求是不是比其他人更多呢？

1193
00:59:01,590 --> 00:59:04,530
那你就需要分析一下这是什么原因？

1194
00:59:04,680 --> 00:59:07,740
比如说，是不是有一个特别小的表？

1195
00:59:07,770 --> 00:59:08,880
他的所以

1196
00:59:09,210 --> 00:59:10,620
位于这两个kv上

1197
00:59:15,060 --> 00:59:16,320
那对于这种

1198
00:59:16,440 --> 00:59:17,910
比较热点的锐骏

1199
00:59:18,330 --> 00:59:22,230
或者是热点的一个表，一个小表，它可能只在一个微信里面

1200
00:59:22,680 --> 00:59:24,930
那我们被低抗臭是可以

1201
00:59:25,020 --> 00:59:27,750
手动把这个人均进行切分的

1202
00:59:28,170 --> 00:59:30,390
比如说，我把它切成四个或者六个

1203
00:59:30,900 --> 00:59:34,080
切完之后呢，再经过霹雳的热点

1204
00:59:34,260 --> 00:59:35,970
分析和这个

1205
00:59:36,030 --> 00:59:37,440
流量统计等

1206
00:59:38,130 --> 00:59:43,350
这些信息之后呢，他自己会去统计，然后把这些识别出来的热点呢进行分散

1207
00:59:43,710 --> 00:59:44,760
达到一个

1208
00:59:44,850 --> 00:59:46,230
负载均衡的一个效果

1209
00:59:50,490 --> 00:59:53,340
同时你也可以看靠谱，乡下他有一

1210
00:59:53,430 --> 00:59:55,530
一些这个监控可以看

1211
00:59:55,650 --> 00:59:56,430
比如说

1212
00:59:56,820 --> 00:59:59,520
这个月开始就是选就是说我这个请求在

1213
00:59:59,700 --> 01:00:00,930
口不下在这边

1214
01:00:01,080 --> 01:00:02,880
是耗费了多长时间？

1215
01:00:03,300 --> 01:00:05,550
那这个时间里面有多少是排队的呢？

1216
01:00:05,850 --> 01:00:07,350
就是这个味的，就这些

1217
01:00:07,860 --> 01:00:09,630
那多少是真正处理的

1218
01:00:09,690 --> 01:00:12,210
这个岩石呢啊，通过这个图来看呢？

1219
01:00:12,390 --> 01:00:14,730
我们可以看到，他大部分时间可能在位置

1220
01:00:14,820 --> 01:00:16,470
说明什么，说明你可能

1221
01:00:16,560 --> 01:00:18,180
池子的个数不够了

1222
01:00:18,780 --> 01:00:22,260
虽然每个请求处理的这个岩石都不高，但是

1223
01:00:22,950 --> 01:00:26,010
我的位置就是性却很高，导致我最终的这个

1224
01:00:26,490 --> 01:00:29,910
坚持很高，那可能你这个池子的数量不太够

1225
01:00:34,620 --> 01:00:35,790
好

1226
01:00:35,850 --> 01:00:39,840
那你最终你是要读那个BB，你的数据存在了，是不是？

1227
01:00:40,530 --> 01:00:45,840
那我怎么能看看4b的快不快呢？对吧，那慢了应该怎么调整呢？

1228
01:00:47,670 --> 01:00:50,700
前面我们介绍过老师被考虑范围

1229
01:00:52,020 --> 01:00:53,880
对吧，她是这个

1230
01:00:54,090 --> 01:00:55,290
独立的一个

1231
01:00:56,100 --> 01:00:56,880
空间

1232
01:00:57,060 --> 01:01:00,210
在他里面呢，有独立的慢慢推进，独立的部落看书

1233
01:01:00,570 --> 01:01:01,620
以及独立的

1234
01:01:02,160 --> 01:01:03,780
这个list

1235
01:01:04,350 --> 01:01:06,900
他们之间的是共享这个打不了日志

1236
01:01:08,190 --> 01:01:08,790
好

1237
01:01:08,970 --> 01:01:11,790
那我们这部分的主要关注在这个

1238
01:01:12,210 --> 01:01:13,500
不知道，看是这款

1239
01:01:18,750 --> 01:01:20,070
我们先看一下

1240
01:01:20,075 --> 01:01:22,500
我如果要干他一个kv的话

1241
01:01:22,590 --> 01:01:24,180
我的流程是什么样子？

1242
01:01:24,390 --> 01:01:25,470
首先第一部

1243
01:01:25,800 --> 01:01:29,160
才会去慢慢填补看一下我这个有没有这个kv？

1244
01:01:29,310 --> 01:01:30,900
如果有的话，直接返回

1245
01:01:31,200 --> 01:01:34,260
因为慢慢推广，里面是最新写入的数据

1246
01:01:34,710 --> 01:01:36,210
所以一定是最新的

1247
01:01:37,410 --> 01:01:41,460
那其次，他会去看一下部落，看看里面有没有看书？

1248
01:01:42,690 --> 01:01:45,210
实际上，它是要按这个层次啊！

1249
01:01:45,360 --> 01:01:47,640
当时是按这个层次，比如说

1250
01:01:47,670 --> 01:01:52,980
看看这个文件，那看这个文件在部落看群里面有没有看看去直接读看书？

1251
01:01:53,310 --> 01:01:54,480
如果没有看雪

1252
01:01:54,570 --> 01:01:57,210
他就需要去先把这个文件

1253
01:01:57,540 --> 01:01:58,620
从此饭上

1254
01:01:58,650 --> 01:01:59,910
捞到你了

1255
01:01:59,915 --> 01:02:01,440
和系统配置，看什么呀？

1256
01:02:02,640 --> 01:02:05,820
要注意唠叨，系统开始看看这这个时候实际上是

1257
01:02:06,180 --> 01:02:07,200
没有解压的

1258
01:02:07,470 --> 01:02:09,480
比如说他是一个压缩的形式

1259
01:02:11,280 --> 01:02:12,780
那解压完之后呢？

1260
01:02:13,770 --> 01:02:17,340
把这一个一个的这个解决完之后的一个布洛克

1261
01:02:17,550 --> 01:02:20,220
这里面叫block其他数据库可能叫配置

1262
01:02:22,410 --> 01:02:24,480
一个一样一个一个的不让考

1263
01:02:24,540 --> 01:02:26,130
填充到这个大学里面

1264
01:02:26,490 --> 01:02:27,480
然后再去读

1265
01:02:29,490 --> 01:02:32,940
所以它的过渡过程是，首先是走慢慢推广

1266
01:02:33,090 --> 01:02:34,020
然后

1267
01:02:34,260 --> 01:02:39,570
去看ST，但是呢，他不直接看这个，而是看这个看雪梅有没有？如果没有的话

1268
01:02:39,810 --> 01:02:40,470
他会

1269
01:02:40,500 --> 01:02:41,940
把磁盘上捞上来

1270
01:02:42,390 --> 01:02:45,630
然后捞上来之后呢，再解压，然后舔到这里面

1271
01:02:49,920 --> 01:02:51,300
那我们就知道

1272
01:02:51,420 --> 01:02:56,550
我们的内存可能会被几部分占用，一部分是慢慢培养，一部分是部落开始

1273
01:02:56,670 --> 01:02:58,800
一部分是这个系统的，可以去看

1274
01:03:00,960 --> 01:03:01,770
所以呢？

1275
01:03:01,775 --> 01:03:04,380
你在调整你的部落，开学的时候

1276
01:03:05,790 --> 01:03:07,530
一定要留一些内存给

1277
01:03:07,740 --> 01:03:09,120
系统的配置看看

1278
01:03:09,180 --> 01:03:10,230
留多少呢？

1279
01:03:10,320 --> 01:03:12,360
这个实际上是有一些

1280
01:03:13,200 --> 01:03:14,910
啊，这个替不是提到了

1281
01:03:15,570 --> 01:03:20,490
就是如果你的热点数据越多，你想把这些热点数据都缓存在内存中

1282
01:03:21,330 --> 01:03:25,200
你压缩形式缓存，那肯定缓存的数据更多，如果你

1283
01:03:25,320 --> 01:03:28,410
非压缩的方式的话，你可能反正的数据更少

1284
01:03:28,530 --> 01:03:29,340
谁呢？

1285
01:03:30,000 --> 01:03:32,310
你可以根据你的热点数据到底有多少？

1286
01:03:33,570 --> 01:03:34,350
来去

1287
01:03:34,950 --> 01:03:36,210
调整这个参数

1288
01:03:36,930 --> 01:03:39,840
但是一般的情况呢？为了简化这个

1289
01:03:40,230 --> 01:03:41,490
情况我们都是

1290
01:03:41,550 --> 01:03:44,460
开始看的和不能看是大概是1比1的这个

1291
01:03:45,960 --> 01:03:46,830
去配置

1292
01:03:54,900 --> 01:03:56,100
我看比如说

1293
01:03:57,180 --> 01:03:58,740
啊，在这个里边

1294
01:03:58,830 --> 01:04:02,670
我配置的这个地方的CF的部落看赛尔27笔

1295
01:04:03,480 --> 01:04:05,130
那这个里边的

1296
01:04:05,340 --> 01:04:08,280
Y的CF的一个部落开赛的16疾病

1297
01:04:08,580 --> 01:04:12,810
Lock s SAAB这个一般不会动的，因为这个lock cover都比较小

1298
01:04:12,900 --> 01:04:15,510
主要的数据是放在软的CF和

1299
01:04:15,630 --> 01:04:16,650
皮肤好的CF

1300
01:04:17,910 --> 01:04:19,110
你可以根据

1301
01:04:20,100 --> 01:04:21,810
根据你的监控图来看

1302
01:04:22,050 --> 01:04:23,220
比如说这个例子面

1303
01:04:23,790 --> 01:04:24,510
哇

1304
01:04:24,540 --> 01:04:27,000
It CF可能是390g左右

1305
01:04:27,330 --> 01:04:29,310
我的地方都是346作用

1306
01:04:29,490 --> 01:04:30,540
你也可以去

1307
01:04:30,720 --> 01:04:32,010
按照这个

1308
01:04:32,340 --> 01:04:37,650
391比346这样的比例去配置你个个CC f的

1309
01:04:38,010 --> 01:04:39,150
一个晒死

1310
01:04:41,190 --> 01:04:42,390
当然你可以

1311
01:04:44,070 --> 01:04:48,030
留得更多一点，给这个给这个软件CF

1312
01:04:48,510 --> 01:04:52,020
因为LED c of的数据肯定是被

1313
01:04:52,260 --> 01:04:54,360
首先读到的，比如说

1314
01:04:55,020 --> 01:04:59,430
你在写多多少的情况，你的写入是需要进行约束性检查的

1315
01:04:59,520 --> 01:05:02,970
那你这个过程就需要独到外的CF，以及洛克CF

1316
01:05:03,570 --> 01:05:08,130
当然落在我刚讲了，她一般比较小，所以你这个东西不需要怎么调整？

1317
01:05:08,880 --> 01:05:11,430
很多的CF可能会被经常读到

1318
01:05:12,420 --> 01:05:13,530
对对对

1319
01:05:13,680 --> 01:05:17,910
读多写少的情况呢，首先你读的肯定也是一个软件CF和唠嗑

1320
01:05:18,120 --> 01:05:20,610
然后再去读地方的相生日

1321
01:05:20,820 --> 01:05:23,310
不需要再去读地方的事，比如说

1322
01:05:23,430 --> 01:05:24,720
我一个抗的心

1323
01:05:25,080 --> 01:05:27,420
实际上我不关心它里面是什么数据？

1324
01:05:27,425 --> 01:05:29,490
我只需要知道他有多少行

1325
01:05:29,640 --> 01:05:33,420
史上这个时候只会读这个乱的现象，所以呢？

1326
01:05:33,690 --> 01:05:39,000
啊，你也可以把这个按照刚刚那个比例之后再把这个软件事业部的权重稍微调高一点

1327
01:05:42,060 --> 01:05:43,110
当然

1328
01:05:43,170 --> 01:05:46,380
这实际上是一个不太友好的几个参数，因为

1329
01:05:46,530 --> 01:05:49,440
我需要根据那么多情况去调整过这个

1330
01:05:49,650 --> 01:05:53,430
CF去划分我这个个个CF部落看出赛车

1331
01:05:54,000 --> 01:05:57,510
从从360开始呢？实际上我所有的

1332
01:05:57,570 --> 01:06:00,330
CF都是共享一个部落看书

1333
01:06:03,690 --> 01:06:06,270
它的参数就要是到了就点部落开始

1334
01:06:06,420 --> 01:06:09,780
然后卡巴塞体就是你设置多大的这个？

1335
01:06:10,290 --> 01:06:13,290
内存给这个部落要进行使用

1336
01:06:13,950 --> 01:06:15,030
那就是

1337
01:06:15,270 --> 01:06:18,030
比如说我不同CF的数据都放在这个里面

1338
01:06:18,120 --> 01:06:21,030
那就看他们谁比较热，谁更加热？

1339
01:06:21,840 --> 01:06:24,630
将更多的数据能够占用更多的内存

1340
01:06:28,800 --> 01:06:29,400
好

1341
01:06:32,640 --> 01:06:34,380
刚刚讲到其实

1342
01:06:34,560 --> 01:06:37,740
你调啊，不论看赛程，陪你看去

1343
01:06:37,860 --> 01:06:41,070
其实按照简简单的一笔一来说也是可以的

1344
01:06:42,810 --> 01:06:43,560
这样

1345
01:06:43,565 --> 01:06:44,520
比较简单

1346
01:06:44,580 --> 01:06:45,480
比较好记

1347
01:06:49,650 --> 01:06:54,930
好，那我怎么看过这个配置的？看看之后有没有效果呢？

1348
01:06:55,020 --> 01:06:58,740
或者说我怎么知道，我现在开始命中率有多少呢？

1349
01:06:59,190 --> 01:07:00,240
那实际上

1350
01:07:01,140 --> 01:07:02,790
在这个乱世必

1351
01:07:02,910 --> 01:07:04,650
里边有一些统计的

1352
01:07:04,830 --> 01:07:06,330
比如说这个里边

1353
01:07:07,260 --> 01:07:10,320
你主要看其实你主要看就是看对他这部分

1354
01:07:11,040 --> 01:07:14,580
因为cos而是一代代实际上是啊，让CBA内部

1355
01:07:15,600 --> 01:07:19,710
你可以认为是元数据相关的些东西索引数据和和

1356
01:07:19,950 --> 01:07:22,350
可能非常不能过滤器的一个数据

1357
01:07:23,280 --> 01:07:26,940
然后他们一般原则上是尽量让他们都开始在内存

1358
01:07:27,150 --> 01:07:28,260
是最好的

1359
01:07:29,070 --> 01:07:31,650
然后你就主要看这个，对他这部分的

1360
01:07:32,070 --> 01:07:34,470
命中率，比如说这个里面是95%

1361
01:07:36,180 --> 01:07:40,440
说明了你还有一部分数据呢，可能没有看是在内存中

1362
01:07:41,940 --> 01:07:43,890
但是你有95%的这

1363
01:07:44,340 --> 01:07:47,340
除了流量可能已经被这个看命命中了

1364
01:07:49,980 --> 01:07:50,670
好

1365
01:07:51,180 --> 01:07:54,720
那今天的这个内容大概是这个样子

1366
01:07:54,810 --> 01:07:58,650
如果大家有任何疑问的话，可以登录平台不官方网站

1367
01:07:58,860 --> 01:08:01,620
跟你卧室里点评开始点抗进行咨询

1368
01:08:02,100 --> 01:08:02,970
谢谢大家

1369
01:08:07,680 --> 01:08:08,220
我不知道

