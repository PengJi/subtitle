1
00:00:00,060 --> 00:00:05,370
嗯嗯嗯嗯嗯

2
00:00:05,375 --> 00:00:10,680
大家好

3
00:00:11,370 --> 00:00:14,760
今天跟大家讲一下啊，kv的架构原理

4
00:00:16,140 --> 00:00:17,550
这些人介绍下我自己

5
00:00:17,850 --> 00:00:19,110
叫李建俊

6
00:00:19,320 --> 00:00:21,390
是太KB这边的

7
00:00:21,630 --> 00:00:24,840
工程师，然后写过几个的话不4000万的裤

8
00:00:25,110 --> 00:00:27,330
好可怕，爸爸s需要PC ss

9
00:00:29,790 --> 00:00:34,290
然后这个课程希望是能够让大家了解一下tak t的整体架构

10
00:00:34,470 --> 00:00:36,780
然后对他也会有个全局的认识

11
00:00:37,350 --> 00:00:38,340
然后他kv

12
00:00:38,400 --> 00:00:43,230
更底层的东西更细节的东西会有后面的课程会进行进行的介绍

13
00:00:45,000 --> 00:00:48,120
你要这些课程主要是针对整体架构

14
00:00:48,180 --> 00:00:53,490
然后我们用的，然后再自己向上介绍一下它可以用到的单击储存引擎

15
00:00:54,150 --> 00:00:55,770
还有这个凹的算法

16
00:00:56,400 --> 00:00:57,690
还有车

17
00:00:58,650 --> 00:01:00,150
不让社团的一个扩展

18
00:01:00,180 --> 00:01:00,960
好听话

19
00:01:01,530 --> 00:01:02,970
还有分布式事务

20
00:01:03,420 --> 00:01:04,440
以及下推

21
00:01:06,450 --> 00:01:08,370
首先说一下我们的整体架构

22
00:01:11,520 --> 00:01:12,540
我可以看到

23
00:01:13,140 --> 00:01:14,370
这边可那样子

24
00:01:14,400 --> 00:01:16,200
其实就是上边的泰迪b

25
00:01:16,410 --> 00:01:19,380
要通过r pc这里的ipc，实际上是gr PC

26
00:01:19,590 --> 00:01:21,060
说她KB进行

27
00:01:21,600 --> 00:01:25,080
进行沟进行交进行交流，然后

28
00:01:25,085 --> 00:01:27,420
Skt，实际上是一个一整套集群

29
00:01:28,560 --> 00:01:33,840
然后集群这套集群里面，每一个sky的储存引擎会分成很多个

30
00:01:34,500 --> 00:01:35,280
分片

31
00:01:36,000 --> 00:01:39,060
杨芬片之间形成了一个发布

32
00:01:40,560 --> 00:01:41,400
聊这些

33
00:01:41,430 --> 00:01:44,520
这些信息会定期上报给批地

34
00:01:44,525 --> 00:01:45,960
然后pd在负责

35
00:01:46,440 --> 00:01:49,080
负责进行负载均衡相关的东西

36
00:01:49,470 --> 00:01:51,150
这是一个粗略的一个

37
00:01:51,210 --> 00:01:52,140
成立的架构

38
00:01:55,140 --> 00:01:56,760
然后我们设计太KB

39
00:01:57,330 --> 00:02:01,980
其实我们要做的事情是需要有一个高性能的k TT TT TT t

40
00:02:02,250 --> 00:02:03,870
来喂泰迪b

41
00:02:03,960 --> 00:02:05,250
提供这个

42
00:02:05,970 --> 00:02:10,230
数数据储存，还有一些下对计算的任务

43
00:02:11,130 --> 00:02:14,400
所以这个东西需要保证一个前抑制性

44
00:02:15,090 --> 00:02:18,150
还要支持一个acd的数模型

45
00:02:18,750 --> 00:02:23,100
还要可以实现数据的自定义分布和负载均衡

46
00:02:24,960 --> 00:02:26,580
然后要实现这个

47
00:02:26,610 --> 00:02:27,720
设计目标

48
00:02:27,930 --> 00:02:31,440
首先，我们他作为一个储存引擎，他作为一个

49
00:02:31,445 --> 00:02:34,290
用来储存数据的东西，肯定需要一个储存隐

50
00:02:38,160 --> 00:02:39,600
所以我们选用了

51
00:02:39,930 --> 00:02:40,560
对比

52
00:02:42,600 --> 00:02:47,910
罗斯弟弟是一个单机的储存，PPT引擎，它是基于lcm

53
00:02:48,150 --> 00:02:51,690
模型这个模型可以提高磁盘的利用率

54
00:02:52,500 --> 00:02:57,240
然后它还提供了这个分层的储存和多集的缓存

55
00:02:57,330 --> 00:02:59,040
这样能提高这个热

56
00:02:59,045 --> 00:03:00,690
用数据的读取效率

57
00:03:03,090 --> 00:03:04,740
我们看一下沃斯db的

58
00:03:04,830 --> 00:03:06,270
一个价，一个价格

59
00:03:07,200 --> 00:03:08,550
所有的请求

60
00:03:08,790 --> 00:03:10,080
写进来的时候

61
00:03:10,560 --> 00:03:11,790
我先写到六了

62
00:03:12,300 --> 00:03:16,320
然后再然后再从那个里面，然后再同时写到这个

63
00:03:16,530 --> 00:03:17,580
边推广里面

64
00:03:17,820 --> 00:03:19,380
当兵他也给我买了以后

65
00:03:19,470 --> 00:03:21,750
就会变成一个只读的面料不？

66
00:03:22,290 --> 00:03:23,040
然后

67
00:03:23,130 --> 00:03:25,800
结果只得了面条，有野蛮了，就会刷盘

68
00:03:25,830 --> 00:03:27,930
刷到下面的这个SD的文件

69
00:03:31,200 --> 00:03:36,330
然后ST它是分层的，每个层，每层之间的，还是t是通过看拍摄

70
00:03:36,480 --> 00:03:37,410
来进行

71
00:03:37,860 --> 00:03:39,630
从上一层楼到下一层的

72
00:03:40,920 --> 00:03:44,280
然后这整个过程中都是一次都是顺序写

73
00:03:44,640 --> 00:03:45,270
谢

74
00:03:45,510 --> 00:03:46,380
这唠的

75
00:03:46,410 --> 00:03:48,240
那个那个，其实外表太热

76
00:03:48,660 --> 00:03:49,530
然后

77
00:03:49,590 --> 00:03:50,880
给这个ST

78
00:03:50,910 --> 00:03:52,650
It是只读的也是个

79
00:03:52,710 --> 00:03:54,270
那天我直接刷下来的文件

80
00:03:54,360 --> 00:03:58,770
整个过程都是顺序写，所以它能够提高他们能够提供

81
00:03:58,920 --> 00:04:00,990
非常好的一个，写的信任

82
00:04:03,960 --> 00:04:09,270
然后说CD比我们这次所使用的斯比，还因为它提供了非常比较完备的歌

83
00:04:09,870 --> 00:04:11,310
比如说，他们分娩

84
00:04:11,820 --> 00:04:15,270
基于框架方面的我，我们可以针对不同的类型的数据进行

85
00:04:15,420 --> 00:04:18,480
不同的储存方式和进行特殊的配置

86
00:04:18,870 --> 00:04:21,120
比如说像什么啊，一些

87
00:04:21,420 --> 00:04:23,730
数据量小的呢？我们可以把它

88
00:04:24,330 --> 00:04:27,690
整体的把他的开开水迢迢的积极一点

89
00:04:27,780 --> 00:04:30,270
把它的这个整体数据都开始在内存里面

90
00:04:31,710 --> 00:04:33,930
然后还可以精细的控制，可以省

91
00:04:34,080 --> 00:04:35,610
可以配置这个现场数

92
00:04:36,000 --> 00:04:39,090
然后也可以手动去触发，还可以控制

93
00:04:39,120 --> 00:04:41,070
他不是很细瓷盘子，这个速度

94
00:04:42,000 --> 00:04:44,130
还有第三个是赢家

95
00:04:44,220 --> 00:04:45,870
承诺ST发哦

96
00:04:46,020 --> 00:04:47,490
这个东西它

97
00:04:47,495 --> 00:04:51,330
用处主要是比如说我在进行数据搬运的时候

98
00:04:51,450 --> 00:04:54,510
我直接把个文件搬运过来就可以了，不需要再去

99
00:04:54,690 --> 00:04:57,150
导数据，然后再一个一条一条插回去

100
00:04:58,350 --> 00:05:00,780
还有一个很有用的功能是会飞

101
00:05:01,320 --> 00:05:04,380
所以，菲斯bra COO还有一个瑞特瑞特阿伦棒

102
00:05:04,950 --> 00:05:08,430
这两个特性能够在特殊场景下，可以加速时间

103
00:05:11,490 --> 00:05:13,830
像我们已经有一个单机的群，你进了

104
00:05:13,860 --> 00:05:16,290
但是我们要实现一个分布式的一个

105
00:05:16,980 --> 00:05:18,180
TV，储存

106
00:05:18,270 --> 00:05:21,270
引起我们还需要一套一致性的协议

107
00:05:21,480 --> 00:05:22,440
就是说话

108
00:05:24,570 --> 00:05:25,500
说话

109
00:05:25,740 --> 00:05:26,700
他

110
00:05:27,060 --> 00:05:28,110
整体的

111
00:05:28,170 --> 00:05:28,950
不知道

112
00:05:29,040 --> 00:05:30,720
发布算法其实

113
00:05:30,750 --> 00:05:32,010
啊是比较简单的

114
00:05:32,100 --> 00:05:33,510
但是要在这个

115
00:05:33,750 --> 00:05:39,060
啊OPPO vivo里面把它讲出来呢？其实还是比较耗时间，所以这里只是讲解

116
00:05:39,300 --> 00:05:42,120
他比较关键的一部分，其中一个特性是选举

117
00:05:43,710 --> 00:05:46,290
所有节点，当它启动的时候都是服了我

118
00:05:47,130 --> 00:05:49,080
然后当佛陀

119
00:05:49,260 --> 00:05:50,580
没有说的

120
00:05:50,640 --> 00:05:53,040
你的会给疯了发心跳有个疯了

121
00:05:53,130 --> 00:05:55,560
持续一段时间都收不到这个心跳的话

122
00:05:55,565 --> 00:05:58,410
就会变成天地的开始，发起选举

123
00:05:59,640 --> 00:06:03,660
如果他能够收到绝大多数人的投票，那它就会变成真的

124
00:06:04,920 --> 00:06:06,330
如果你的发现

125
00:06:06,510 --> 00:06:11,700
低的，当它变成绿的时候，他有个痛，因为他发现有当前集群中有几点的字比他还大？

126
00:06:11,850 --> 00:06:12,750
那么他就

127
00:06:12,810 --> 00:06:14,130
他又变成富翁了

128
00:06:16,530 --> 00:06:18,360
这是选举的一个大体过程

129
00:06:20,520 --> 00:06:22,410
然后当他选举完成以后

130
00:06:22,680 --> 00:06:25,620
所有的日志都是从里的复制给佛陀的

131
00:06:27,030 --> 00:06:27,960
比如说这里

132
00:06:28,080 --> 00:06:29,490
当这个客户端

133
00:06:29,610 --> 00:06:34,080
他有他要进行某些操作的时候，这个操作会不会转换成一个落？

134
00:06:34,440 --> 00:06:36,750
一个肉感会写到这个袜子模块里面

135
00:06:36,900 --> 00:06:38,430
有啊，再把这些

136
00:06:38,880 --> 00:06:42,120
就是给分发到这两边这两个佛乐里面

137
00:06:42,510 --> 00:06:44,250
当她得知

138
00:06:45,360 --> 00:06:49,620
整个轱辘里面大多数11点都已经有这个日子的时候，它就会进行科目

139
00:06:50,070 --> 00:06:52,620
科蜜他以后他就可以写到这个

140
00:06:52,650 --> 00:06:54,990
实际的球权引擎，也是罗斯蒂利里面

141
00:06:58,020 --> 00:07:03,330
说这个算法会会在下一节课里面去着重介绍，这里就不长

142
00:07:03,335 --> 00:07:04,080
开了

143
00:07:04,620 --> 00:07:09,540
不袜子能够提供给我们的一些特性，包括历史历历史，历史

144
00:07:10,260 --> 00:07:14,490
这个特性允许我们直接本地图可以优化这个读请求的延迟

145
00:07:15,390 --> 00:07:19,890
然后另一方面他也可以进行佛乐瑞来分担立德的

146
00:07:20,010 --> 00:07:20,730
压力

147
00:07:21,600 --> 00:07:24,180
这样读不集中，在单个节点上吧

148
00:07:24,690 --> 00:07:27,480
它还能够支持动态副本的变更

149
00:07:29,040 --> 00:07:30,030
所以我们

150
00:07:30,540 --> 00:07:33,960
我们可以直接通过输入法本身来实现这个

151
00:07:33,990 --> 00:07:35,220
数据的搬迁

152
00:07:35,850 --> 00:07:37,410
而不需要额外的机制

153
00:07:38,280 --> 00:07:39,210
然后

154
00:07:39,390 --> 00:07:41,460
啊袜子他

155
00:07:41,820 --> 00:07:44,520
啊媛媛，我们实现的软件

156
00:07:44,820 --> 00:07:47,460
原生支持的这种败去操作

157
00:07:47,640 --> 00:07:50,370
所以也为我们后面实现这个猫贴吧

158
00:07:50,400 --> 00:07:52,620
提供一个性能优化的手段

159
00:07:56,160 --> 00:07:56,820
所以

160
00:07:57,060 --> 00:07:58,890
毛皮吧是怎么做的呢？

161
00:08:00,000 --> 00:08:03,060
顾名思义，猫TV，其实就是一个

162
00:08:03,240 --> 00:08:04,410
多个辣子的

163
00:08:04,415 --> 00:08:05,040
卧铺

164
00:08:05,490 --> 00:08:06,540
停车在一起

165
00:08:06,545 --> 00:08:07,830
睡觉毛坯吧！

166
00:08:10,020 --> 00:08:11,550
这里我们看到

167
00:08:11,700 --> 00:08:13,890
啊就三个探究秘色的

168
00:08:13,950 --> 00:08:16,350
然后每个台KTV设了，里面都有

169
00:08:16,500 --> 00:08:17,370
三个

170
00:08:17,730 --> 00:08:18,390
T

171
00:08:18,750 --> 00:08:20,520
其实也就是三个分片

172
00:08:20,760 --> 00:08:23,100
然后这些屁眼组成一个外服务

173
00:08:24,870 --> 00:08:26,550
然后这个t4倍

174
00:08:26,760 --> 00:08:29,610
就有多个万福歌曲来同时管理

175
00:08:30,390 --> 00:08:33,090
对这一套机制，后面的课程也会

176
00:08:33,120 --> 00:08:35,670
有详细的介绍，这里也不展开了

177
00:08:38,220 --> 00:08:40,140
一个对于一个毛线袜子

178
00:08:40,290 --> 00:08:43,680
还要实现负载均衡，其实就是进行副本的

179
00:08:43,920 --> 00:08:44,700
房间

180
00:08:46,170 --> 00:08:47,310
这个示意图

181
00:08:47,520 --> 00:08:48,390
是个屁

182
00:08:49,740 --> 00:08:51,510
他从这个地方

183
00:08:52,470 --> 00:08:54,660
她他要从这个地方搬到这个地方

184
00:08:55,410 --> 00:08:58,200
这个他这个这个不用普他要从

185
00:08:58,500 --> 00:09:00,120
还要从这个地方搬到这个地

186
00:09:01,710 --> 00:09:05,490
通过这种副本的搬迁，我们能够首先实现这种

187
00:09:05,520 --> 00:09:07,020
每个太坑爹受了

188
00:09:07,350 --> 00:09:08,280
他的

189
00:09:08,760 --> 00:09:10,590
储存数据的一个均衡

190
00:09:10,680 --> 00:09:15,180
比如说这边的以后某个太阳谷的数据特别多，我们可以把它搬迁到另外

191
00:09:15,930 --> 00:09:17,280
还有一点是说

192
00:09:17,550 --> 00:09:19,860
这种搬迁，其实还可以实现

193
00:09:19,920 --> 00:09:21,900
啊，这种种

194
00:09:21,990 --> 00:09:23,190
技术中心的

195
00:09:23,430 --> 00:09:24,390
数据分布

196
00:09:24,930 --> 00:09:30,240
比如说你失望，某些数据是更偏向于某个数据中心，每天通过这个这个证机制

197
00:09:30,360 --> 00:09:31,500
来进行搬迁

198
00:09:33,690 --> 00:09:35,610
调负载均衡，除了这个

199
00:09:36,240 --> 00:09:37,950
说这个副本搬迁的

200
00:09:38,190 --> 00:09:40,380
手段以外，还有个力的搬迁的手段

201
00:09:40,470 --> 00:09:45,030
因为刚刚也是说的是所有的数据都是有的，流向佛的，所以立得

202
00:09:45,120 --> 00:09:48,510
不可避免会成为一种成为分片本身的特点

203
00:09:48,750 --> 00:09:50,580
所以由我们把分片的

204
00:09:50,585 --> 00:09:51,510
三点可

205
00:09:51,810 --> 00:09:53,940
看不到所有的他可以说得上

206
00:09:53,970 --> 00:09:54,570
那么

207
00:09:54,750 --> 00:09:55,500
这个

208
00:09:55,530 --> 00:09:57,420
热点问题就会被解决

209
00:09:59,280 --> 00:10:01,110
然后他竟然是毛血旺

210
00:10:01,710 --> 00:10:05,250
那么这种多个毛贴外敷不入谱是怎么产生的呢？

211
00:10:05,370 --> 00:10:06,870
他就是通过分裂产生的

212
00:10:08,040 --> 00:10:09,510
可以可以看一下这个

213
00:10:09,720 --> 00:10:10,650
这个实力

214
00:10:11,010 --> 00:10:12,330
在这个事情里面

215
00:10:13,590 --> 00:10:17,130
她的这个分片，你想要比其他分片要大

216
00:10:18,300 --> 00:10:21,330
有如果一个分片太大的话，它就会容易带来这种

217
00:10:21,870 --> 00:10:23,220
热点相关的问题

218
00:10:23,280 --> 00:10:24,870
对，我们需要把它分裂成

219
00:10:25,590 --> 00:10:27,390
分裂成多个80

220
00:10:30,120 --> 00:10:32,490
分裂其实是一个

221
00:10:32,495 --> 00:10:33,540
逻辑概念

222
00:10:33,720 --> 00:10:35,370
也就是她只是

223
00:10:35,670 --> 00:10:38,280
他只是嗯，修改了一下，面积数据

224
00:10:38,340 --> 00:10:39,060
他的

225
00:10:39,120 --> 00:10:40,380
李晨的吧！

226
00:10:40,385 --> 00:10:41,280
ST b

227
00:10:41,640 --> 00:10:44,340
这些所有的副本都是共用一个SSD d的

228
00:10:44,610 --> 00:10:47,040
所以实际上并不会发生数据的

229
00:10:47,160 --> 00:10:48,930
拷贝或者是

230
00:10:48,935 --> 00:10:51,600
呃呃，或者是底层求全隐形的分裂

231
00:10:51,660 --> 00:10:53,100
仅仅是缘

232
00:10:53,400 --> 00:10:55,410
仅仅是原数据的一个改变

233
00:10:55,620 --> 00:10:59,430
把原始的这个万佛沟口控制的这个分片

234
00:10:59,580 --> 00:11:00,660
给修改成

235
00:11:00,840 --> 00:11:05,730
一个更小范围，同时产生一个新的外部来展馆空出来这个分片

236
00:11:09,840 --> 00:11:10,770
和分裂

237
00:11:11,100 --> 00:11:12,840
和分裂啊！

238
00:11:13,080 --> 00:11:14,790
相反的一个过程就是合并

239
00:11:16,350 --> 00:11:19,410
如果这两个万事贵的都特别小

240
00:11:19,800 --> 00:11:21,240
那么它就会产生

241
00:11:22,050 --> 00:11:27,360
他就会造成资源的浪费，因为每个日子过得其实都是有依据的原数据

242
00:11:27,365 --> 00:11:29,520
据的管理是需要资源的

243
00:11:29,640 --> 00:11:33,420
如果太多小的，这个这些元数据的话

244
00:11:33,540 --> 00:11:34,230
啊？

245
00:11:34,770 --> 00:11:35,700
会

246
00:11:36,060 --> 00:11:39,750
会很容易让系统达到一个瓶颈，所以需要把这些

247
00:11:40,230 --> 00:11:41,280
技巧的

248
00:11:41,490 --> 00:11:42,990
分配给合并起来

249
00:11:43,020 --> 00:11:44,370
也就是这个合并的过程

250
00:11:48,810 --> 00:11:50,250
分裂合并

251
00:11:50,340 --> 00:11:51,360
负载均衡

252
00:11:51,390 --> 00:11:53,160
也会在下一节课里面讲到

253
00:11:54,300 --> 00:11:56,850
这里只介绍一下它的基本的策略

254
00:11:57,690 --> 00:12:01,980
就是当副本数不足的时候，比如说我们其实话说有一份数据，他有三副本

255
00:12:02,160 --> 00:12:03,480
他他们现在只有两个本

256
00:12:03,540 --> 00:12:06,840
这时候可以通过添加副本的操作

257
00:12:07,770 --> 00:12:08,670
来让他

258
00:12:08,880 --> 00:12:10,200
还让他补助副本

259
00:12:10,500 --> 00:12:12,180
然后还有吃饭空间不足

260
00:12:12,750 --> 00:12:13,890
也就刚刚说的

261
00:12:13,980 --> 00:12:16,590
进行一个空间的负载均衡

262
00:12:16,890 --> 00:12:19,320
还有计算资源不足，所以也是

263
00:12:20,730 --> 00:12:21,630
刚刚说的

264
00:12:21,690 --> 00:12:25,500
两种两种均衡法是一种是挪副本，一种是努力的

265
00:12:26,820 --> 00:12:28,440
然后还有

266
00:12:28,860 --> 00:12:29,970
毕竟数目

267
00:12:30,030 --> 00:12:33,210
玉枕一个睿智里面包含像数据过多的话，那么分裂

268
00:12:33,630 --> 00:12:35,790
如果小学生太多的话，那么就合并

269
00:12:38,760 --> 00:12:44,070
那么现在我们已经有一个前一致的一个，KC处理引起了我们有时候c BOC BOC

270
00:12:44,075 --> 00:12:45,780
上面加了一个毛球啊！

271
00:12:47,640 --> 00:12:50,550
但是我们还差一个分布式的事务

272
00:12:53,490 --> 00:12:55,440
我们的业务模型是车

273
00:12:55,800 --> 00:12:58,170
阿格蕾塔的一个数模型

274
00:12:58,590 --> 00:13:02,730
这种事我们我们的生活，心里面是通过批地进行

275
00:13:03,180 --> 00:13:05,730
授时服务，保证一个全局都有去

276
00:13:06,480 --> 00:13:08,310
然后通过两阶段提交

277
00:13:08,430 --> 00:13:10,230
乐观并发控制

278
00:13:12,150 --> 00:13:13,380
提交的时候

279
00:13:13,530 --> 00:13:15,300
什么叫乐观并发控制？

280
00:13:15,510 --> 00:13:17,580
也就是你所有的操作

281
00:13:17,610 --> 00:13:21,660
必定，然后再进行多个数超过，然后最后看MID

282
00:13:22,020 --> 00:13:25,260
只有在坑秘境的时候才会进行冲突的检查

283
00:13:25,500 --> 00:13:27,300
然后必要时候会回滚

284
00:13:28,500 --> 00:13:32,010
这一个这个地方是嗯，跟传统

285
00:13:32,015 --> 00:13:33,990
数据库非常不一样的地方

286
00:13:34,290 --> 00:13:39,330
后面也会对这个对这一点进行重点展开的战略重点

287
00:13:39,420 --> 00:13:40,200
长寿

288
00:13:40,680 --> 00:13:43,350
这里只是一个大概的一介绍也不展开了

289
00:13:43,530 --> 00:13:46,260
然后还可选一个悲观事物

290
00:13:46,620 --> 00:13:49,800
机关事务是30里面的一个实验性功能

291
00:13:50,430 --> 00:13:55,740
然后如果如果开启了这个开启了悲观事物的话，可以让你得到的

292
00:13:55,950 --> 00:13:57,750
传统数据库类似的体验

293
00:13:59,790 --> 00:14:00,480
可我

294
00:14:00,570 --> 00:14:05,880
都会给他模型里面不太一样的地方是我们不需要一个全局的一个

295
00:14:06,270 --> 00:14:07,170
第五单点

296
00:14:07,500 --> 00:14:09,090
管理器我们是

297
00:14:09,150 --> 00:14:11,820
把客户端自身作为事务的协调性

298
00:14:16,440 --> 00:14:17,460
我们的

299
00:14:17,465 --> 00:14:19,950
点击到提交是怎么是什么意思呢？

300
00:14:20,040 --> 00:14:22,050
就是说，比如说这一个事物

301
00:14:22,055 --> 00:14:24,660
一定然后写了四个字，然后开始

302
00:14:25,140 --> 00:14:26,670
那么，在坑里的时候

303
00:14:26,760 --> 00:14:29,550
首先，我会在这个戏里面去挑一个

304
00:14:29,555 --> 00:14:30,840
作为一个排位t

305
00:14:31,980 --> 00:14:33,360
然后把它写到

306
00:14:33,450 --> 00:14:34,650
先写一个唠嗑

307
00:14:34,890 --> 00:14:36,840
表示先把这个锁住

308
00:14:37,590 --> 00:14:41,580
你要其他的可以作为CA c，可以分别写到其他的节点上

309
00:14:43,500 --> 00:14:47,610
所成功以后呢，我们再把这个数据把排名TT

310
00:14:47,820 --> 00:14:48,750
先提交

311
00:14:49,440 --> 00:14:52,950
华为t标记着整个事物是成功还是失败？

312
00:14:53,250 --> 00:14:54,090
所以在

313
00:14:54,240 --> 00:14:55,590
在二阶段的

314
00:14:55,770 --> 00:14:56,610
开始

315
00:14:57,270 --> 00:14:59,910
才能够最终决定这个事务是成功或失败

316
00:15:00,180 --> 00:15:05,340
一旦华美可以被坑，媒体了，那么CK的人气就会被一部的去看变态

317
00:15:05,760 --> 00:15:07,260
然后整个事物就成功了

318
00:15:10,560 --> 00:15:14,220
我们有了事业，有了钱一致性的kv

319
00:15:14,280 --> 00:15:15,720
然后还有

320
00:15:15,930 --> 00:15:18,420
非常高效的单机处理引擎

321
00:15:19,680 --> 00:15:22,410
那么，这整个整个kt就已经

322
00:15:22,500 --> 00:15:24,870
有了一个非常完整的

323
00:15:26,430 --> 00:15:27,840
Kat人服务

324
00:15:28,020 --> 00:15:28,890
但是

325
00:15:29,700 --> 00:15:34,110
泰利必如果要进行计算的话，他还需要把所有数据都捞到本地的计算

326
00:15:36,210 --> 00:15:40,800
和泰迪必和他给你通常是分开久一点的，所以就会有大宽带的浪费

327
00:15:41,160 --> 00:15:42,480
也有这个

328
00:15:42,750 --> 00:15:46,080
计算资源的浪费，因为他QQ本身也是个

329
00:15:46,200 --> 00:15:49,560
写一点吧，她又CPU那CPU不用起来不就浪费了吗？

330
00:15:49,860 --> 00:15:50,490
所以

331
00:15:50,495 --> 00:15:52,380
我们还需要一个科普特色的

332
00:15:54,060 --> 00:15:55,260
什么是科比色色？

333
00:15:55,500 --> 00:15:58,980
科目三的，就是说把泰迪币所能计算的一些

334
00:15:59,790 --> 00:16:01,230
东西下推到

335
00:16:01,650 --> 00:16:03,090
太KTV上了计算

336
00:16:03,330 --> 00:16:05,490
比如说啊，我来创新

337
00:16:05,700 --> 00:16:08,070
如果是，如果没有靠谱特色，那么

338
00:16:08,310 --> 00:16:12,600
简单的执行，就是把所有事情都拿出来，然后再泰迪必须计算一次

339
00:16:13,440 --> 00:16:15,570
这样一方面很容易就om

340
00:16:15,900 --> 00:16:19,860
因为不一定有那么多内存可以用，那时候的数据，你要另一方面的话

341
00:16:19,865 --> 00:16:21,870
还可以么？几点去奉献了？所以

342
00:16:22,920 --> 00:16:23,670
一个

343
00:16:23,675 --> 00:16:27,270
可行的做法是把这些创新分下降到各个

344
00:16:27,390 --> 00:16:28,500
怎么样上去做？

345
00:16:28,530 --> 00:16:33,840
比较每个分片去统计，他分析当前的个数，然后最后再泰迪b里面

346
00:16:34,050 --> 00:16:35,730
做一个聚合，把它们加起来

347
00:16:37,410 --> 00:16:42,600
所以科波菲尔的所做的事情就是下列函数直接在数据节点上执行

348
00:16:42,930 --> 00:16:45,090
这样避免了数据的单元

349
00:16:47,010 --> 00:16:49,920
然后就根本射手是太KB了，一个独立主见

350
00:16:50,070 --> 00:16:52,800
它是一个低耦合的方式

351
00:16:53,580 --> 00:16:54,510
啊？

352
00:16:54,720 --> 00:16:56,610
啊组合在一起的

353
00:16:57,120 --> 00:17:01,620
因为刚刚我们也已经说其实去掉了，他不在这儿太偏僻，也是一个

354
00:17:01,740 --> 00:17:03,210
完整的分布式

355
00:17:03,810 --> 00:17:06,210
事物TV，储存年轻

356
00:17:07,050 --> 00:17:10,770
然后可不先是在30里面还支持的向量化执行

357
00:17:10,980 --> 00:17:12,810
这个极大的加速了

358
00:17:13,590 --> 00:17:15,660
啊太db的一个

359
00:17:16,020 --> 00:17:17,400
计算过程

360
00:17:19,560 --> 00:17:20,220
好

361
00:17:20,460 --> 00:17:24,690
进行了介绍，以后我们再回头看一下整体的一个架构

362
00:17:25,560 --> 00:17:27,930
首先是可以养的

363
00:17:28,050 --> 00:17:29,640
也就是他弟弟这一段

364
00:17:30,270 --> 00:17:32,700
然后还有skt和霹雳

365
00:17:34,980 --> 00:17:37,530
KTV里面分成了多层

366
00:17:37,890 --> 00:17:40,920
啊，包含这上面这边这个是

367
00:17:40,980 --> 00:17:41,820
ST b

368
00:17:41,850 --> 00:17:47,160
然后司机上面是SP vvvv里面包含了简单的袜子，还有毛巾袜

369
00:17:47,670 --> 00:17:49,680
然后乱发网上就是MV CC

370
00:17:50,100 --> 00:17:51,570
Mcc就是

371
00:17:51,930 --> 00:17:54,000
MV CC的全身省其实

372
00:17:54,270 --> 00:17:57,720
啊是统一提供了整个事物的

373
00:17:57,870 --> 00:17:58,620
机制

374
00:17:59,820 --> 00:18:03,300
以后全身手马上就是PPAP I和o不羞涩

375
00:18:03,360 --> 00:18:06,210
T VIP就是简单的库特赛特

376
00:18:06,215 --> 00:18:08,790
然后克厕所就是刚刚提到了下推的

377
00:18:09,720 --> 00:18:10,470
请求

378
00:18:10,620 --> 00:18:15,930
然后她TV定期给pd汇报心跳，告诉他当前分分片的情况

379
00:18:16,140 --> 00:18:16,980
PPT

380
00:18:17,070 --> 00:18:17,820
在做

381
00:18:17,850 --> 00:18:20,280
具体的负载均衡的命令

382
00:18:20,640 --> 00:18:24,870
太太太可以在执行这些秘密来实现最终的均衡

383
00:18:25,860 --> 00:18:30,120
Pd和然后客户端是通过向劈地去

384
00:18:30,300 --> 00:18:33,060
查询拿到各个分店的地址

385
00:18:34,410 --> 00:18:37,980
然后最终根据这些地址去具体的APP上面去

386
00:18:38,790 --> 00:18:40,500
下发建议的请求

387
00:18:41,130 --> 00:18:42,960
这些协议这些通信

388
00:18:43,080 --> 00:18:44,910
全部都是通过opc

389
00:18:45,120 --> 00:18:46,410
来实现现的

390
00:18:49,740 --> 00:18:52,410
然后对于整体价格还有什么疑问的话

391
00:18:52,530 --> 00:18:55,050
欢迎登录我们的官方网站进行提问

392
00:18:59,760 --> 00:19:00,360
我不知道

